idrop.version=3.1.0.0
policy.aware=false
login.preset=false
force.mode=false
force.no.synch=false
advanced.view=true
show.startup=true
idrop.show.gui=true

# swing look and feel (Nimbus, GTK, System, Metal, Motif)
idrop.lookandfeel=System
transfer.database=transferDatabase
#login.preset.host=diamond.ils.unc.edu
#login.preset.zone=lifelibZone
#login.preset.resource=lifelibResc1
#login.preset.port=2247
device.name=

transferengine.record.successful.files=true

#login.preset.host=localhost
#login.preset.zone=test1
#login.preset.resource=test1-resc
#login.preset.port=1247
# comment the following property to turn off rolling log file in users .idrop directory, or set to a valid log level
rolling.log.level=INFO

#---------
# properties that control jargon behavior

# verify checksum on put/get transfer
idrop.verify.checksum=true
# receive and display intra-file transfer progress (slight performance penalty)
idrop.intra.file.status.callbacks=true
# time-out for main iRODS connection (0 if not specified, otherwise, in seconds)
idrop.irods.timeout=120
# time-out for iRODS connection during parallel transfers (0 if not specified, otherwise, in seconds)
idrop.irods.parallel.timeout=60
# maximum threads allowed for parallel transfer
idrop.parallel.transfer.max.threads=4
# use executor pool for parallel transfers (true to use pool, false to use normal th
idrop.parallel.use.pool=true
# allow rerouting of connections for put/get to best resource
idrop.allow.connection.rerouting=false

# <<<< note that below not in effect, normalizing with jargon.properties file
# buffer sized used in parallel get/put threads FIXME needs impl to replace constant, currently no effect
transfer.parallel.buffer.size=2048
# time out (in seconds) for iRODS connections to the main control channel (typicall 1247)
socket.timeout=120
# time out (in seconds) for socket connections for parallel transfer threads
parallel.socket.timeout=120
# internal buffer size used for the input stream between Jargon and iRODS  (0 = use defaults, -1 = do not wrap with buffered input stream)
jargon.io.internal.input.stream.buffer.size=0
# internal buffer size used for the output stream between Jargon and iRODS  (0 = use defaults, -1 = do not wrap with buffered output stream)
jargon.io.internal.output.stream.buffer.size=-1
#  Get the size of the internal buffer cache used to accumulate data being sent to iRODS.   (0 =  do not utilize the cache buffer)
jargon.io.internal.cache.buffer.size=65535
# buffer size used for the input stream being sent to iRODS. (0 = use defaults, -1 = do not wrap with buffered input stream)
jargon.io.send.input.stream.buffer.size=0
#  size of the buffer used in read/write operations (read into, and write from this buffer in the read/write loop).
jargon.io.input.to.output.copy.byte.buffer.size=65536
# size of buffer used in output stream to a local file  (0 = use defaults, -1 = do not wrap with buffered output stream)
jargon.io.local.output.stream.buffer.size=16384
# size of buffer used in input stream from a local file  (0 = use defaults, -1 = do not wrap with buffered input stream)
jargon.io.local.input.stream.buffer.size=16384
# size of buffer used in put operations (file segment size per call to DataObjInp)
jargon.put.buffer.size=4194304
# size of buffer used in get operations (file segment size per call to DataObjInp)
jargon.get.buffer.size=4194304

#allow resource redirects (redirect transfers to resource server containing file)
transfer.allow.redirects=false
#compute a checksum for every file put to iRODS (does not do a verification/comparison)
transfer.compute.checksum=false
#compute a checksum for every file put/get to iRODS and verify
transfer.computeandvalidate.checksum=false
#send within-file status call-backs on transfers (slight performance penalty, but allows monitoring of file progress if 'true'
transfer.intra.file.callbacks=false
#do not allow parallel trasfers at all
transfer.use.parallel=true
#use NIO variant for parallel transfers (use java nio transferTo between the local file system and iRODS) - EXPERIMENTAL
transfer.use.nio.for.parallel=false
#thread cap for parallel transfers, can interact with pool settings above, set to 0 for no max, transfer.use.parallel overrides this
transfer.max.parallel.threads=4
