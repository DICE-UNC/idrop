/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.Cursor;
import java.io.File;

import javax.swing.ListSelectionModel;
import javax.swing.tree.TreePath;

import org.irods.jargon.core.exception.JargonException;
import org.irods.jargon.core.pub.io.IRODSFile;
import org.irods.jargon.datautils.tree.DiffTreePostProcessor;
import org.irods.jargon.datautils.tree.FileTreeDiffUtility;
import org.irods.jargon.datautils.tree.FileTreeDiffUtilityImpl;
import org.irods.jargon.datautils.tree.FileTreeModel;
import org.irods.jargon.idrop.desktop.systraygui.services.IRODSFileService;
import org.irods.jargon.idrop.desktop.systraygui.utils.MessageUtil;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.DiffViewData;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.IRODSNode;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.IRODSOutlineModel;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.LocalFileNode;
import org.irods.jargon.idrop.exceptions.IdropException;
import org.slf4j.LoggerFactory;

/**
 * 
 * @author Mike
 */
public class ToolsDialog extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 281326213233955032L;
	private final iDrop idropGui;
	public static org.slf4j.Logger log = LoggerFactory
			.getLogger(ToolsDialog.class);

	public ToolsDialog(final iDrop parent, final boolean modal) {
		super(parent, modal);
		initComponents();
		idropGui = parent;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		pnlButtons = new javax.swing.JPanel();
		btnToolbarDiff = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
		setName("ToolsDialog"); // NOI18N
		setResizable(false);
		// setType(java.awt.Window.Type.POPUP);
		getContentPane().setLayout(
				new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

		pnlButtons.setLayout(new java.awt.GridBagLayout());

		btnToolbarDiff
				.setIcon(new javax.swing.ImageIcon(
						getClass()
								.getResource(
										"/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_428_git_compare.png"))); // NOI18N
		btnToolbarDiff.setMnemonic('D');
		btnToolbarDiff.setText(org.openide.util.NbBundle.getMessage(
				ToolsDialog.class, "ToolsDialog.btnToolbarDiff.text")); // NOI18N
		btnToolbarDiff.setToolTipText(org.openide.util.NbBundle.getMessage(
				ToolsDialog.class, "ToolsDialog.btnToolbarDiff.toolTipText")); // NOI18N
		btnToolbarDiff.setBorder(null);
		btnToolbarDiff
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		btnToolbarDiff.setMaximumSize(null);
		btnToolbarDiff.setMinimumSize(null);
		btnToolbarDiff.setPreferredSize(null);
		btnToolbarDiff
				.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		btnToolbarDiff.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				btnToolbarDiffActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.ipadx = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		pnlButtons.add(btnToolbarDiff, gridBagConstraints);

		getContentPane().add(pnlButtons);

		getAccessibleContext().setAccessibleName(
				org.openide.util.NbBundle.getMessage(ToolsDialog.class,
						"ToolsDialog.AccessibleContext.accessibleName")); // NOI18N
		getAccessibleContext().setAccessibleDescription(
				org.openide.util.NbBundle.getMessage(ToolsDialog.class,
						"ToolsDialog.AccessibleContext.accessibleDescription")); // NOI18N
		getAccessibleContext().setAccessibleParent(this);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void btnToolbarDiffActionPerformed(
			final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnToolbarDiffActionPerformed
		log.info("diff action performed");
		// look for selected local and iRODS files

		TreePath localPath = idropGui.getFileTree().getSelectionPath();
		if (localPath == null) {
			MessageUtil.showError(this,
					"A local path needs to be selected to do a diff",
					MessageUtil.ERROR_MESSAGE);
			dispose();
		}

		LocalFileNode selectedFileNode = (LocalFileNode) idropGui.getFileTree()
				.getSelectionPath().getLastPathComponent();
		File targetPath = (File) selectedFileNode.getUserObject();
		final String localAbsPath = targetPath.getAbsolutePath();
		final File localFile = new File(localAbsPath);

		// look for iRODS absolute path for the right hand side of the diff

		IRODSFileService irodsFS;
		try {
			irodsFS = new IRODSFileService(idropGui.getiDropCore()
					.getIrodsAccount(), idropGui.getiDropCore()
					.getIrodsFileSystem());
		} catch (Exception ex) {

			log.error("cannot create irods file service", ex);
			MessageUtil.showError(this,
					"Cannot create iRODS file Service, see exception log",
					MessageUtil.ERROR_MESSAGE);
			dispose();
			return;
		}

		final String irodsAbsPath;
		IRODSOutlineModel irodsFileSystemModel = (IRODSOutlineModel) idropGui
				.getIrodsTree().getModel();
		ListSelectionModel selectionModel = idropGui.getIrodsTree()
				.getSelectionModel();
		int idx = selectionModel.getLeadSelectionIndex();
		IRODSFile ifile;
		// make sure there is a selected node
		if (idx >= 0) {

			try {
				IRODSNode selectedNode = (IRODSNode) irodsFileSystemModel
						.getValueAt(idx, 0);
				if (selectedNode == null) {
					return;
				}
				ifile = irodsFS.getIRODSFileForPath(selectedNode.getFullPath());

				// rule out "/" and choose parent if file is not a directory
				String path = ifile.getAbsolutePath();
				if (ifile.isFile()) {
					path = ifile.getParent();
				}
				if ((path != null) && (!path.equals("/"))) {
					irodsAbsPath = path;
				} else {
					irodsAbsPath = "/";
				}
				log.info("irods path for diff:{}", ifile.getAbsolutePath());
			} catch (IdropException ex) {
				MessageUtil.showError(this, ex.getMessage(),
						MessageUtil.ERROR_MESSAGE);
				dispose();
				return;
			}
		} else {
			MessageUtil.showError(this,
					"An iRODS path needs to be selected to do a diff",
					MessageUtil.ERROR_MESSAGE);
			dispose();
			return;
		}

		final ToolsDialog thisDialog = this;

		log.info("local path for diff:{}", localAbsPath);

		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {

				thisDialog.dispose();
				idropGui.setCursor(Cursor
						.getPredefinedCursor(Cursor.WAIT_CURSOR));
				FileTreeDiffUtility fileTreeDiffUtility = new FileTreeDiffUtilityImpl(
						idropGui.getiDropCore().getIrodsAccount(), idropGui
								.getiDropCore().getIRODSAccessObjectFactory());
				try {
					FileTreeModel diffModel = fileTreeDiffUtility
							.generateDiffLocalToIRODS(localFile, irodsAbsPath,
									0L, 0L);
					DiffTreePostProcessor postProcessor = new DiffTreePostProcessor();
					postProcessor.postProcessFileTreeModel(diffModel);

					log.info("diffModel:{}", diffModel);
					DiffViewData diffViewData = new DiffViewData();
					diffViewData.setFileTreeModel(diffModel);
					diffViewData.setIrodsAbsolutePath(irodsAbsPath);
					diffViewData.setLocalAbsolutePath(localAbsPath);
					DiffViewDialog diffViewDialog = new DiffViewDialog(
							thisDialog.idropGui, true, diffViewData);
					diffViewDialog.setVisible(true);
				} catch (JargonException ex) {
					log.error("Error generating diff", ex);
					MessageUtil.showError(
							thisDialog,
							"An error occurred generating the diff:\n"
									+ ex.getMessage(),
							MessageUtil.ERROR_MESSAGE);
					thisDialog.dispose();
				} finally {
					idropGui.setCursor(Cursor
							.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				}
			}
		});

	}// GEN-LAST:event_btnToolbarDiffActionPerformed
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JButton btnToolbarDiff;
	private javax.swing.JPanel pnlButtons;
	// End of variables declaration//GEN-END:variables
}
