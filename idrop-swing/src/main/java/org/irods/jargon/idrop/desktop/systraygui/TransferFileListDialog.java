/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.irods.jargon.conveyor.core.ConveyorExecutionException;
import org.irods.jargon.core.utils.MiscIRODSUtils;
import org.irods.jargon.idrop.desktop.systraygui.utils.FieldFormatHelper;
import org.irods.jargon.idrop.desktop.systraygui.utils.IDropUtils;
import org.irods.jargon.idrop.desktop.systraygui.utils.TransferInformationMessageBuilder;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.ItemListPagingTableModel;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.TransferItemTable;
import org.irods.jargon.transfer.dao.domain.TransferAttempt;
import org.irods.jargon.transfer.dao.domain.TransferItem;
import org.irods.jargon.transfer.dao.domain.TransferStatusEnum;
import org.openide.util.Exceptions;
import org.slf4j.LoggerFactory;

/**
 *
 * @author lisa
 */
public class TransferFileListDialog extends javax.swing.JDialog {

    /**
     *
     */
    private static final long serialVersionUID = -2239251501465433857L;
    private final TransferAttempt transferAttempt;
    private TransferItem currentTransferItem;
    private final int itemsPerPage = 3000;
    private ItemListPagingTableModel tableModel;
    private boolean showSuccess = true;
    private boolean showSkipped = false;
    private final IDROPCore idropCore;

    public static org.slf4j.Logger log = LoggerFactory
            .getLogger(TransferFileListDialog.class);

    /**
     * Creates new form TransferFileListDialog
     *
     * @param parent
     * @param transferAttempt
     * @param idropCore
     */
    public TransferFileListDialog(final javax.swing.JDialog parent,
            final TransferAttempt transferAttempt, final IDROPCore idropCore) {
        super(parent, true);
        this.idropCore = idropCore;
        initComponents();
        pnlItemDetails.setVisible(false);

        this.transferAttempt = transferAttempt;
        initStats();

        try {
            tableModel = new ItemListPagingTableModel(itemsPerPage,
                    transferAttempt.getId(), showSuccess, showSkipped, idropCore.getConveyorService()
                    .getQueueManagerService());
            tblItemList.setModel(tableModel);
            tblItemList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (e.getValueIsAdjusting()) {
                        return;
                    }

                    final TransferItem transferItem = tableModel.getTransferItem(e.getFirstIndex());

                    if (transferItem == null) {
                        return;
                    }

                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            lblLength.setText(FieldFormatHelper.formatFileLength(transferItem.getLengthInBytes()));

                            if (transferItem.getErrorMessage() != null) {
                                lblItemErrorMessage.setText(transferItem.getErrorMessage());
                            } else {
                                lblItemErrorMessage.setText("");
                            }

                            if (transferItem.getErrorStackTrace() == null || transferItem.getErrorStackTrace().isEmpty()) {
                                btnShowErrorDetails.setVisible(false);
                            } else {
                                btnShowErrorDetails.setVisible(true);
                            }

                            lblSourceName.setText(IDropUtils.abbreviateFileName(transferItem.getSourceFileAbsolutePath()));
                            lblSourceName.setToolTipText(transferItem.getSourceFileAbsolutePath());
                            lblTargetName.setText(IDropUtils.abbreviateFileName(transferItem.getTargetFileAbsolutePath()));
                            lblTargetName.setToolTipText(transferItem.getTargetFileAbsolutePath());
                            currentTransferItem = transferItem;
                            pnlItemDetails.setVisible(true);

                        }
                    });

                }
            });
        } catch (ConveyorExecutionException ex) {
            log.error("exception building item table", ex);
            MessageManager.showError(this, ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMain = new javax.swing.JPanel();
        pnlTransferAttemptDetails = new javax.swing.JPanel();
        lblAttemptIdLabel = new javax.swing.JLabel();
        lblAttemptId = new javax.swing.JLabel();
        lblSequenceNumberLabel = new javax.swing.JLabel();
        lblSequenceNumber = new javax.swing.JLabel();
        lblTransferIdLabel = new javax.swing.JLabel();
        lblTransferId = new javax.swing.JLabel();
        lblTransferTypeLabel = new javax.swing.JLabel();
        lblTransferType = new javax.swing.JLabel();
        lblSourceLabel = new javax.swing.JLabel();
        lblSource = new javax.swing.JLabel();
        lblTargetLabel = new javax.swing.JLabel();
        lblTarget = new javax.swing.JLabel();
        lblResourceLabel = new javax.swing.JLabel();
        lblResource = new javax.swing.JLabel();
        lblSummary = new javax.swing.JLabel();
        lblProcessingStateLabel = new javax.swing.JLabel();
        lblProcessingState = new javax.swing.JLabel();
        lblStatusLabel = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblAttemptStarttLabel = new javax.swing.JLabel();
        lblAttemptStart = new javax.swing.JLabel();
        lblAttemptEndLabel = new javax.swing.JLabel();
        lblAttemptEnd = new javax.swing.JLabel();
        lblErrorMessage = new javax.swing.JLabel();
        lblAttemptTypeLabel = new javax.swing.JLabel();
        lblAttemptType = new javax.swing.JLabel();
        scrollErrorMessage = new javax.swing.JScrollPane();
        textAreaErrorMessage = new javax.swing.JTextArea();
        pnlList = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItemList = new TransferItemTable();
        pnlItemDetails = new javax.swing.JPanel();
        lblSourceNameLabel = new javax.swing.JLabel();
        lblSourceName = new javax.swing.JLabel();
        lblTargetNameLabel = new javax.swing.JLabel();
        lblLengthLabel = new javax.swing.JLabel();
        lblLength = new javax.swing.JLabel();
        lblErrorMessageLabel = new javax.swing.JLabel();
        lblItemErrorMessage = new javax.swing.JLabel();
        btnShowErrorDetails = new javax.swing.JButton();
        lblTargetName = new javax.swing.JLabel();
        pnlButtons = new javax.swing.JPanel();
        toolbarButtons = new javax.swing.JToolBar();
        btnFirstPage = new javax.swing.JButton();
        btnPrevPage = new javax.swing.JButton();
        btnNextPage = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        jSeparator1 = new javax.swing.JToolBar.Separator();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        btnErrorsOnly = new javax.swing.JToggleButton();
        btnShowSkipped = new javax.swing.JToggleButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.title")); // NOI18N
        setName("transferFileListDialog"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 800));

        pnlMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        pnlMain.setPreferredSize(new java.awt.Dimension(1000, 400));
        pnlMain.setLayout(new java.awt.BorderLayout());

        pnlTransferAttemptDetails.setLayout(new java.awt.GridBagLayout());

        lblAttemptIdLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAttemptIdLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAttemptIdLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblAttemptIdLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblAttemptIdLabel, gridBagConstraints);

        lblAttemptId.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.id.text")); // NOI18N
        lblAttemptId.setName("id"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblAttemptId, gridBagConstraints);

        lblSequenceNumberLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSequenceNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSequenceNumberLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblSequenceNumberLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblSequenceNumberLabel, gridBagConstraints);

        lblSequenceNumber.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.sequenceNumber.text")); // NOI18N
        lblSequenceNumber.setName("sequenceNumber"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblSequenceNumber, gridBagConstraints);

        lblTransferIdLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTransferIdLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTransferIdLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblTransferIdLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblTransferIdLabel, gridBagConstraints);

        lblTransferId.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.transferId.text")); // NOI18N
        lblTransferId.setName("transferId"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblTransferId, gridBagConstraints);

        lblTransferTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTransferTypeLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblTransferTypeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblTransferTypeLabel, gridBagConstraints);

        lblTransferType.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.transferType.text")); // NOI18N
        lblTransferType.setName("transferType"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblTransferType, gridBagConstraints);

        lblSourceLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSourceLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblSourceLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblSourceLabel, gridBagConstraints);

        lblSource.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.sourcePath.text")); // NOI18N
        lblSource.setName("sourcePath"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        pnlTransferAttemptDetails.add(lblSource, gridBagConstraints);

        lblTargetLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTargetLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblTargetLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblTargetLabel, gridBagConstraints);

        lblTarget.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.targetPath.text")); // NOI18N
        lblTarget.setName("targetPath"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblTarget, gridBagConstraints);

        lblResourceLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblResourceLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblResourceLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        pnlTransferAttemptDetails.add(lblResourceLabel, gridBagConstraints);

        lblResource.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.resourceName.text")); // NOI18N
        lblResource.setName("resourceName"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        pnlTransferAttemptDetails.add(lblResource, gridBagConstraints);

        lblSummary.setForeground(new java.awt.Color(51, 51, 255));
        lblSummary.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.transferSummary.text")); // NOI18N
        lblSummary.setMaximumSize(null);
        lblSummary.setMinimumSize(null);
        lblSummary.setName("transferSummary"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblSummary, gridBagConstraints);

        lblProcessingStateLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblProcessingStateLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblProcessingStateLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblProcessingStateLabel, gridBagConstraints);

        lblProcessingState.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.processingState.text")); // NOI18N
        lblProcessingState.setName("processingState"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblProcessingState, gridBagConstraints);

        lblStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblStatusLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblStatusLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblStatusLabel, gridBagConstraints);

        lblStatus.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.processingStatus.text")); // NOI18N
        lblStatus.setName("processingStatus"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblStatus, gridBagConstraints);

        lblAttemptStarttLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAttemptStarttLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblAttemptStarttLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblAttemptStarttLabel, gridBagConstraints);

        lblAttemptStart.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.attemptStartValue.text")); // NOI18N
        lblAttemptStart.setName("attemptStartValue"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblAttemptStart, gridBagConstraints);

        lblAttemptEndLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAttemptEndLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblAttemptEndLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlTransferAttemptDetails.add(lblAttemptEndLabel, gridBagConstraints);

        lblAttemptEnd.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.attemptEndDate.text")); // NOI18N
        lblAttemptEnd.setName("attemptEndDate"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblAttemptEnd, gridBagConstraints);

        lblErrorMessage.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        lblErrorMessage.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblErrorMessage.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        pnlTransferAttemptDetails.add(lblErrorMessage, gridBagConstraints);

        lblAttemptTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAttemptTypeLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblAttemptTypeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlTransferAttemptDetails.add(lblAttemptTypeLabel, gridBagConstraints);

        lblAttemptType.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.attemptTypeValue.text")); // NOI18N
        lblAttemptType.setName("attemptTypeValue"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(lblAttemptType, gridBagConstraints);

        scrollErrorMessage.setMinimumSize(new java.awt.Dimension(400, 100));

        textAreaErrorMessage.setColumns(100);
        textAreaErrorMessage.setRows(5);
        textAreaErrorMessage.setMinimumSize(null);
        textAreaErrorMessage.setName("errorMessage"); // NOI18N
        scrollErrorMessage.setViewportView(textAreaErrorMessage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlTransferAttemptDetails.add(scrollErrorMessage, gridBagConstraints);

        pnlMain.add(pnlTransferAttemptDetails, java.awt.BorderLayout.NORTH);

        pnlList.setPreferredSize(new java.awt.Dimension(500, 300));
        pnlList.setLayout(new java.awt.BorderLayout());

        tblItemList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblItemList.setName("itemList"); // NOI18N
        jScrollPane2.setViewportView(tblItemList);

        pnlList.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pnlItemDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.pnlItemDetails.border.title"))); // NOI18N
        pnlItemDetails.setMinimumSize(new java.awt.Dimension(730, 150));
        pnlItemDetails.setPreferredSize(new java.awt.Dimension(700, 150));

        lblSourceNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSourceNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSourceNameLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblSourceNameLabel.text")); // NOI18N

        lblSourceName.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.detailSourceName.text")); // NOI18N
        lblSourceName.setName("detailSourceName"); // NOI18N

        lblTargetNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTargetNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTargetNameLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblTargetNameLabel.text")); // NOI18N

        lblLengthLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblLengthLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblLengthLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblLengthLabel.text")); // NOI18N

        lblLength.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.detailLength.text")); // NOI18N
        lblLength.setName("detailLength"); // NOI18N

        lblErrorMessageLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblErrorMessageLabel.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.lblErrorMessageLabel.text")); // NOI18N

        lblItemErrorMessage.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.itemErrorMessage.text")); // NOI18N
        lblItemErrorMessage.setName("itemErrorMessage"); // NOI18N

        btnShowErrorDetails.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnShowErrorDetails.text")); // NOI18N
        btnShowErrorDetails.setToolTipText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnShowErrorDetails.toolTipText")); // NOI18N
        btnShowErrorDetails.setName("btnShowErrorDetails"); // NOI18N
        btnShowErrorDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowErrorDetailsActionPerformed(evt);
            }
        });

        lblTargetName.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.detailTargetName.text")); // NOI18N
        lblTargetName.setMaximumSize(new java.awt.Dimension(88, 20));
        lblTargetName.setMinimumSize(new java.awt.Dimension(88, 20));
        lblTargetName.setName("detailTargetName"); // NOI18N
        lblTargetName.setPreferredSize(new java.awt.Dimension(88, 20));

        org.jdesktop.layout.GroupLayout pnlItemDetailsLayout = new org.jdesktop.layout.GroupLayout(pnlItemDetails);
        pnlItemDetails.setLayout(pnlItemDetailsLayout);
        pnlItemDetailsLayout.setHorizontalGroup(
            pnlItemDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlItemDetailsLayout.createSequentialGroup()
                .add(pnlItemDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblLengthLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblSourceNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(pnlItemDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblSourceName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 364, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 364, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 670, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(pnlItemDetailsLayout.createSequentialGroup()
                .add(30, 30, 30)
                .add(pnlItemDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlItemDetailsLayout.createSequentialGroup()
                        .add(90, 90, 90)
                        .add(lblItemErrorMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 600, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(lblErrorMessageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(pnlItemDetailsLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(btnShowErrorDetails, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pnlItemDetailsLayout.setVerticalGroup(
            pnlItemDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlItemDetailsLayout.createSequentialGroup()
                .add(4, 4, 4)
                .add(pnlItemDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlItemDetailsLayout.createSequentialGroup()
                        .add(40, 40, 40)
                        .add(lblLengthLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(lblSourceNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlItemDetailsLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(lblTargetNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlItemDetailsLayout.createSequentialGroup()
                        .add(lblSourceName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(15, 15, 15)
                        .add(lblLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlItemDetailsLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(lblTargetName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(5, 5, 5)
                .add(pnlItemDetailsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblItemErrorMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblErrorMessageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(btnShowErrorDetails, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pnlList.add(pnlItemDetails, java.awt.BorderLayout.PAGE_START);

        pnlMain.add(pnlList, java.awt.BorderLayout.CENTER);

        pnlButtons.setLayout(new java.awt.GridBagLayout());

        toolbarButtons.setFloatable(false);
        toolbarButtons.setRollover(true);

        btnFirstPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_170_step_backward.png"))); // NOI18N
        btnFirstPage.setMnemonic('S');
        btnFirstPage.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnFirst.text")); // NOI18N
        btnFirstPage.setToolTipText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnFirst.toolTipText")); // NOI18N
        btnFirstPage.setFocusable(false);
        btnFirstPage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFirstPage.setName("btnFirst"); // NOI18N
        btnFirstPage.setPreferredSize(new java.awt.Dimension(90, 50));
        btnFirstPage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFirstPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstPageActionPerformed(evt);
            }
        });
        toolbarButtons.add(btnFirstPage);

        btnPrevPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_172_rewind.png"))); // NOI18N
        btnPrevPage.setMnemonic('S');
        btnPrevPage.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnPrevious.text")); // NOI18N
        btnPrevPage.setToolTipText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnPrevious.toolTipText")); // NOI18N
        btnPrevPage.setFocusable(false);
        btnPrevPage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrevPage.setName("btnPrevious"); // NOI18N
        btnPrevPage.setPreferredSize(new java.awt.Dimension(90, 50));
        btnPrevPage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrevPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevPageActionPerformed(evt);
            }
        });
        toolbarButtons.add(btnPrevPage);

        btnNextPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_176_forward.png"))); // NOI18N
        btnNextPage.setMnemonic('<');
        btnNextPage.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnNext.text")); // NOI18N
        btnNextPage.setToolTipText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnNext.toolTipText")); // NOI18N
        btnNextPage.setFocusable(false);
        btnNextPage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNextPage.setName("btnNext"); // NOI18N
        btnNextPage.setPreferredSize(new java.awt.Dimension(90, 50));
        btnNextPage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextPageActionPerformed(evt);
            }
        });
        toolbarButtons.add(btnNextPage);
        toolbarButtons.add(filler2);

        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 0));
        toolbarButtons.add(jSeparator1);
        toolbarButtons.add(filler1);

        btnErrorsOnly.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnShowErrorsOnly.text")); // NOI18N
        btnErrorsOnly.setActionCommand(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnErrorsOnly.actionCommand")); // NOI18N
        btnErrorsOnly.setFocusable(false);
        btnErrorsOnly.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnErrorsOnly.setMinimumSize(new java.awt.Dimension(61, 49));
        btnErrorsOnly.setName("btnShowErrorsOnly"); // NOI18N
        btnErrorsOnly.setPreferredSize(new java.awt.Dimension(120, 37));
        btnErrorsOnly.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnErrorsOnly.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnErrorsOnlyItemStateChanged(evt);
            }
        });
        toolbarButtons.add(btnErrorsOnly);

        btnShowSkipped.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnShowSkipped.text")); // NOI18N
        btnShowSkipped.setFocusable(false);
        btnShowSkipped.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowSkipped.setName("btnShowSkipped"); // NOI18N
        btnShowSkipped.setPreferredSize(new java.awt.Dimension(120, 37));
        btnShowSkipped.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowSkipped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnShowSkippedItemStateChanged(evt);
            }
        });
        toolbarButtons.add(btnShowSkipped);
        toolbarButtons.add(filler3);
        toolbarButtons.add(jSeparator2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlButtons.add(toolbarButtons, gridBagConstraints);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_193_circle_ok.png"))); // NOI18N
        btnClose.setMnemonic('O');
        btnClose.setText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnOk.text")); // NOI18N
        btnClose.setToolTipText(org.openide.util.NbBundle.getMessage(TransferFileListDialog.class, "TransferFileListDialog.btnOk.toolTipText")); // NOI18N
        btnClose.setFocusable(false);
        btnClose.setName("btnOk"); // NOI18N
        btnClose.setPreferredSize(new java.awt.Dimension(90, 37));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlButtons.add(btnClose, gridBagConstraints);

        pnlMain.add(pnlButtons, java.awt.BorderLayout.SOUTH);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowErrorDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowErrorDetailsActionPerformed

        if (currentTransferItem != null) {
            TransferErrorStackTraceDialog dialog = new TransferErrorStackTraceDialog(null, true, currentTransferItem.getErrorMessage(), currentTransferItem.getErrorStackTrace());
            dialog.setVisible(true);
        }

    }//GEN-LAST:event_btnShowErrorDetailsActionPerformed

    private void btnErrorsOnlyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnErrorsOnlyItemStateChanged

        if (btnErrorsOnly.isSelected()) {
            this.showSuccess = false;
            this.btnShowSkipped.setVisible(false);
        } else {
            this.showSuccess = true;
            this.btnShowSkipped.setVisible(true);
        }
        try {
            updateModel();
        } catch (ConveyorExecutionException ex) {
            Exceptions.printStackTrace(ex);
        }

    }//GEN-LAST:event_btnErrorsOnlyItemStateChanged

    private void btnShowSkippedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnShowSkippedItemStateChanged

        if (btnShowSkipped.isSelected()) {
            this.showSkipped = true;
        } else {
            this.showSkipped = false;
        }
        try {
            updateModel();
        } catch (ConveyorExecutionException ex) {
            Exceptions.printStackTrace(ex);
        }

    }//GEN-LAST:event_btnShowSkippedItemStateChanged

    private void btnFirstPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstPageActionPerformed
        try {
            tableModel.pageFirst();
        } catch (ConveyorExecutionException ex) {
            Exceptions.printStackTrace(ex);
        }    }//GEN-LAST:event_btnFirstPageActionPerformed

    private void updateModel() throws ConveyorExecutionException {
        tableModel = new ItemListPagingTableModel(itemsPerPage,
                transferAttempt.getId(), showSuccess, showSkipped, idropCore.getConveyorService()
                .getQueueManagerService());
        tblItemList.setModel(tableModel);
        tableModel.fireTableDataChanged();
    }

    private void btnNextPageActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnNextPageActionPerformed
        try {
            tableModel.pageDown();
        } catch (ConveyorExecutionException ex) {
            Exceptions.printStackTrace(ex);
        }
    }// GEN-LAST:event_btnNextPageActionPerformed

    private void btnPrevPageActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnPrevPageActionPerformed
        try {
            tableModel.pageUp();
        } catch (ConveyorExecutionException ex) {
            Exceptions.printStackTrace(ex);
        }
    }// GEN-LAST:event_btnPrevPageActionPerformed

    private void btnCloseActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }// GEN-LAST:event_btnCloseActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JToggleButton btnErrorsOnly;
    private javax.swing.JButton btnFirstPage;
    private javax.swing.JButton btnNextPage;
    private javax.swing.JButton btnPrevPage;
    private javax.swing.JButton btnShowErrorDetails;
    private javax.swing.JToggleButton btnShowSkipped;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JLabel lblAttemptEnd;
    private javax.swing.JLabel lblAttemptEndLabel;
    private javax.swing.JLabel lblAttemptId;
    private javax.swing.JLabel lblAttemptIdLabel;
    private javax.swing.JLabel lblAttemptStart;
    private javax.swing.JLabel lblAttemptStarttLabel;
    private javax.swing.JLabel lblAttemptType;
    private javax.swing.JLabel lblAttemptTypeLabel;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblErrorMessageLabel;
    private javax.swing.JLabel lblItemErrorMessage;
    private javax.swing.JLabel lblLength;
    private javax.swing.JLabel lblLengthLabel;
    private javax.swing.JLabel lblProcessingState;
    private javax.swing.JLabel lblProcessingStateLabel;
    private javax.swing.JLabel lblResource;
    private javax.swing.JLabel lblResourceLabel;
    private javax.swing.JLabel lblSequenceNumber;
    private javax.swing.JLabel lblSequenceNumberLabel;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblSourceLabel;
    private javax.swing.JLabel lblSourceName;
    private javax.swing.JLabel lblSourceNameLabel;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatusLabel;
    private javax.swing.JLabel lblSummary;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblTargetLabel;
    private javax.swing.JLabel lblTargetName;
    private javax.swing.JLabel lblTargetNameLabel;
    private javax.swing.JLabel lblTransferId;
    private javax.swing.JLabel lblTransferIdLabel;
    private javax.swing.JLabel lblTransferType;
    private javax.swing.JLabel lblTransferTypeLabel;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlItemDetails;
    private javax.swing.JPanel pnlList;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTransferAttemptDetails;
    private javax.swing.JScrollPane scrollErrorMessage;
    private javax.swing.JTable tblItemList;
    private javax.swing.JTextArea textAreaErrorMessage;
    private javax.swing.JToolBar toolbarButtons;
    // End of variables declaration//GEN-END:variables

    private void initStats() {

        if (transferAttempt.getAttemptEnd() == null) {
            lblAttemptEnd.setText("");
        } else {
            lblAttemptEnd.setText(transferAttempt.getAttemptEnd().toString());
        }

        lblAttemptId.setText(String.valueOf(transferAttempt.getId()));

        if (transferAttempt.getAttemptStart() == null) {
            lblAttemptStart.setText("");
        } else {
            lblAttemptStart.setText(transferAttempt.getAttemptStart()
                    .toString());
        }

        lblProcessingState.setText(transferAttempt.getTransfer()
                .getTransferState().name());
        lblResource.setText(transferAttempt.getTransfer().getResourceName());
        lblSequenceNumber.setText(String.valueOf(transferAttempt
                .getSequenceNumber()));
        lblSource.setText(MiscIRODSUtils.abbreviateFileName(transferAttempt.getTransfer().getLocalAbsolutePath()));
        lblSource.setToolTipText(transferAttempt.getTransfer().getLocalAbsolutePath());
        lblStatus.setText(transferAttempt.getAttemptStatus().name());

        if (transferAttempt.getAttemptStatus() == TransferStatusEnum.OK) {
            if (transferAttempt.getTotalFilesSkippedSoFar() > 0) {
                lblSummary
                        .setText(TransferInformationMessageBuilder
                                .buildTransferAttemptSummary(
                                        transferAttempt,
                                        TransferInformationMessageBuilder.AttemptType.SKIPPED));
            } else {
                lblSummary
                        .setText(TransferInformationMessageBuilder
                                .buildTransferAttemptSummary(
                                        transferAttempt,
                                        TransferInformationMessageBuilder.AttemptType.TRANSFERRED));
            }
        } else if (transferAttempt.getAttemptStatus() == TransferStatusEnum.ERROR
                || transferAttempt.getAttemptStatus() == TransferStatusEnum.WARNING) {
            lblSummary
                    .setText(TransferInformationMessageBuilder
                            .buildTransferAttemptSummary(
                                    transferAttempt,
                                    TransferInformationMessageBuilder.AttemptType.ERROR));
        }

        lblTarget.setText(MiscIRODSUtils.abbreviateFileName(transferAttempt.getTransfer().getIrodsAbsolutePath()));
        lblTarget.setToolTipText(transferAttempt.getTransfer().getIrodsAbsolutePath());
        lblTransferId.setText(String.valueOf(transferAttempt.getTransfer()
                .getId()));
        lblTransferType.setText(transferAttempt.getTransfer().getTransferType()
                .name());

        if (transferAttempt.getGlobalException() == null) {
            textAreaErrorMessage.setText("");
        } else {
            textAreaErrorMessage.setText(transferAttempt.getGlobalException());
        }

        if (transferAttempt.getTransferAttemptTypeEnum() != null) {
            lblAttemptType.setText(transferAttempt.getTransferAttemptTypeEnum()
                    .name());
        } else {
            lblAttemptType.setText("");
        }

        lblSourceName.setText("");
        lblTargetName.setText("");
        lblLength.setText("");
        btnShowErrorDetails.setVisible(false);

    }

    public boolean isShowSuccess() {
        return showSuccess;
    }

    public void setShowSuccess(boolean showSuccess) {
        this.showSuccess = showSuccess;
    }

    public boolean isShowSkipped() {
        return showSkipped;
    }

    public void setShowSkipped(boolean showSkipped) {
        this.showSkipped = showSkipped;
    }
}
