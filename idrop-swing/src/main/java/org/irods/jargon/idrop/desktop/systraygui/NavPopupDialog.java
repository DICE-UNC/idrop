/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.event.KeyEvent;
import java.util.Vector;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import org.irods.jargon.core.utils.MiscIRODSUtils;
import org.slf4j.LoggerFactory;

/**
 * @author Mike
 */
public class NavPopupDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1471807767210660336L;
    private final iDrop idropGui;
    public static org.slf4j.Logger log = LoggerFactory
            .getLogger(NavPopupDialog.class);

    public NavPopupDialog(final iDrop parent, final boolean modal) {
        super(parent, modal);
        initComponents();

        idropGui = parent;
        buildPathTable(idropGui.getiDropCore().getBasePath());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        toolbarBreadcrumb = new javax.swing.JToolBar();
        btnGoHomeTargetTree = new javax.swing.JButton();
        filler17 = new javax.swing.Box.Filler(new java.awt.Dimension(2, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(2, 32767));
        btnGoRootTargetTree = new javax.swing.JButton();
        filler18 = new javax.swing.Box.Filler(new java.awt.Dimension(2, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(2, 32767));
        txtCustomPath = new javax.swing.JTextField();
        filler19 = new javax.swing.Box.Filler(new java.awt.Dimension(2, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(2, 32767));
        btnSetCustomRootTargetTree = new javax.swing.JButton();
        scrollBreadcrumbs = new javax.swing.JScrollPane();
        tblBreadcrumbs = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.title")); // NOI18N
        setPreferredSize(new java.awt.Dimension(400, 300));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        toolbarBreadcrumb.setRollover(true);

        btnGoHomeTargetTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_020_home.png"))); // NOI18N
        btnGoHomeTargetTree.setMnemonic('H');
        btnGoHomeTargetTree.setText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.btnHome.text")); // NOI18N
        btnGoHomeTargetTree.setToolTipText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.btnHome.toolTipText")); // NOI18N
        btnGoHomeTargetTree.setBorder(null);
        btnGoHomeTargetTree.setFocusable(false);
        btnGoHomeTargetTree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGoHomeTargetTree.setName("btnHome"); // NOI18N
        btnGoHomeTargetTree.setPreferredSize(new java.awt.Dimension(90, 37));
        btnGoHomeTargetTree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGoHomeTargetTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoHomeTargetTreeActionPerformed(evt);
            }
        });
        toolbarBreadcrumb.add(btnGoHomeTargetTree);
        toolbarBreadcrumb.add(filler17);

        btnGoRootTargetTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_213_up_arrow.png"))); // NOI18N
        btnGoRootTargetTree.setMnemonic('r');
        btnGoRootTargetTree.setText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.btnRoot.text")); // NOI18N
        btnGoRootTargetTree.setToolTipText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.btnRoot.toolTipText")); // NOI18N
        btnGoRootTargetTree.setBorder(null);
        btnGoRootTargetTree.setFocusable(false);
        btnGoRootTargetTree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGoRootTargetTree.setName("btnRoot"); // NOI18N
        btnGoRootTargetTree.setPreferredSize(new java.awt.Dimension(90, 37));
        btnGoRootTargetTree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGoRootTargetTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoRootTargetTreeActionPerformed(evt);
            }
        });
        toolbarBreadcrumb.add(btnGoRootTargetTree);
        toolbarBreadcrumb.add(filler18);

        txtCustomPath.setColumns(60);
        txtCustomPath.setText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.directPathName.text")); // NOI18N
        txtCustomPath.setToolTipText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.directPathName.toolTipText")); // NOI18N
        txtCustomPath.setMinimumSize(null);
        txtCustomPath.setName("directPathName"); // NOI18N
        txtCustomPath.setPreferredSize(null);
        txtCustomPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomPathActionPerformed(evt);
            }
        });
        txtCustomPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustomPathKeyPressed(evt);
            }
        });
        toolbarBreadcrumb.add(txtCustomPath);
        toolbarBreadcrumb.add(filler19);

        btnSetCustomRootTargetTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_380_message_forward.png"))); // NOI18N
        btnSetCustomRootTargetTree.setMnemonic('r');
        btnSetCustomRootTargetTree.setText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.btnSetDirectPath.text")); // NOI18N
        btnSetCustomRootTargetTree.setToolTipText(org.openide.util.NbBundle.getMessage(NavPopupDialog.class, "NavPopupDialog.btnSetDirectPath.toolTipText")); // NOI18N
        btnSetCustomRootTargetTree.setBorder(null);
        btnSetCustomRootTargetTree.setFocusable(false);
        btnSetCustomRootTargetTree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSetCustomRootTargetTree.setName("btnSetDirectPath"); // NOI18N
        btnSetCustomRootTargetTree.setPreferredSize(new java.awt.Dimension(90, 37));
        btnSetCustomRootTargetTree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSetCustomRootTargetTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetCustomRootTargetTreeActionPerformed(evt);
            }
        });
        toolbarBreadcrumb.add(btnSetCustomRootTargetTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.ipadx = 489;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(toolbarBreadcrumb, gridBagConstraints);

        scrollBreadcrumbs.setMinimumSize(null);

        tblBreadcrumbs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBreadcrumbs.setMinimumSize(null);
        tblBreadcrumbs.setName("listPaths"); // NOI18N
        tblBreadcrumbs.setPreferredSize(null);
        tblBreadcrumbs.setShowVerticalLines(false);
        scrollBreadcrumbs.setViewportView(tblBreadcrumbs);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 386;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(scrollBreadcrumbs, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCustomPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomPathActionPerformed

    private void btnGoHomeTargetTreeActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnGoHomeTargetTreeActionPerformed
        String homeRoot;
        if (idropGui.getiDropCore().irodsAccount().isAnonymousAccount()) {
            // log.info("setting home dir to public");
            homeRoot = MiscIRODSUtils.computePublicDirectory(idropGui
                    .getiDropCore().irodsAccount());
        } else {
            homeRoot = MiscIRODSUtils
                    .computeHomeDirectoryForIRODSAccount(idropGui
                            .getiDropCore().irodsAccount());
        }
        idropGui.getiDropCore().setBasePath(homeRoot);
        idropGui.buildTargetTree(false);
        buildPathTable(homeRoot);

        setVisible(false);
    }// GEN-LAST:event_btnGoHomeTargetTreeActionPerformed

    private void btnGoRootTargetTreeActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnGoRootTargetTreeActionPerformed
        idropGui.getiDropCore().setBasePath("/");

        idropGui.buildTargetTree(false);
        buildPathTable("/");

        setVisible(false);
    }// GEN-LAST:event_btnGoRootTargetTreeActionPerformed

    private void btnSetCustomRootTargetTreeActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnSetCustomRootTargetTreeActionPerformed

        String selectedRoot = txtCustomPath.getText();
        if (selectedRoot == null || selectedRoot.isEmpty()) {
            MessageManager.showWarning(this, "Please enter a custom path");
            return;
        }
        useCustomPath(selectedRoot);

    }// GEN-LAST:event_btnSetCustomRootTargetTreeActionPerformed

    private void txtCustomPathKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtCustomPathKeyPressed
        // enter key pressed in text box

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            String selectedRoot = txtCustomPath.getText();
            if (selectedRoot == null || selectedRoot.isEmpty()) {
                MessageManager.showWarning(this, "Please enter a custom path");
                return;
            }
            useCustomPath(selectedRoot);
        }

    }// GEN-LAST:event_txtCustomPathKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGoHomeTargetTree;
    private javax.swing.JButton btnGoRootTargetTree;
    private javax.swing.JButton btnSetCustomRootTargetTree;
    private javax.swing.Box.Filler filler17;
    private javax.swing.Box.Filler filler18;
    private javax.swing.Box.Filler filler19;
    private javax.swing.JScrollPane scrollBreadcrumbs;
    private javax.swing.JTable tblBreadcrumbs;
    private javax.swing.JToolBar toolbarBreadcrumb;
    private javax.swing.JTextField txtCustomPath;
    // End of variables declaration//GEN-END:variables

    public JTable getTblBreadcrumbs() {
        return tblBreadcrumbs;
    }

    private void buildPathTable(final String path) {

        final NavPopupDialog popup = this;
        java.awt.EventQueue.invokeLater(new Runnable() {
            @SuppressWarnings({"rawtypes", "unchecked"})
            @Override
            public void run() {
                String[] paths = path.split("/");
                Vector<Object> strVector = new Vector<Object>();
                Vector<Object> objVector = new Vector<Object>();
                strVector.add("");

                for (String pathElement : paths) {
                    if (!pathElement.isEmpty()) {
                        Vector pathVector = new Vector();
                        pathVector.add(pathElement);
                        objVector.add(pathVector);
                    }
                }
                DefaultTableModel newModel = new DefaultTableModel(objVector,
                        strVector);

                tblBreadcrumbs.setModel(newModel);
                ListSelectionModel listSelectionModel = tblBreadcrumbs
                        .getSelectionModel();
                listSelectionModel
                        .addListSelectionListener(new PathSelectionHandler(
                                        newModel, popup));
                tblBreadcrumbs.setSelectionModel(listSelectionModel);

                newModel.fireTableDataChanged();
            }
        });
    }

    protected void useCustomPath(final String selectedRoot) {

        String prevPath = idropGui.getiDropCore().getBasePath();

        try {
            idropGui.getiDropCore().setBasePath(selectedRoot);
            idropGui.buildTargetTree(false);
            dispose();
        } catch (Exception ie) {
            log.error("unable to find path, revert to prevous path", ie);
            idropGui.getiDropCore().setBasePath(prevPath);
            idropGui.buildTargetTree(true);
            dispose();
        }
    }
}

class PathSelectionHandler implements ListSelectionListener {

    private final DefaultTableModel tableModel;
    private final NavPopupDialog popup;

    PathSelectionHandler(final DefaultTableModel tableModel,
            final NavPopupDialog popup) {
        this.tableModel = tableModel;
        this.popup = popup;
    }

    @Override
    public void valueChanged(final ListSelectionEvent e) {
        ListSelectionModel lsm = (ListSelectionModel) e.getSource();

        boolean isAdjusting = e.getValueIsAdjusting();

        if (isAdjusting) {
            return;
        }

        if (!lsm.isSelectionEmpty()) {

            // Find out which indexes are selected.
            int minIndex = lsm.getMinSelectionIndex();
            // get the selected row index, and build the path from the 0 path
            // forward

            StringBuilder sb = new StringBuilder();

            for (int i = 0; i <= minIndex; i++) {
                sb.append("/");
                sb.append(tableModel.getValueAt(i, 0));
            }

            String path = sb.toString();
            if (path.isEmpty()) {
                path = "/";
            }

            popup.useCustomPath(path);
        }
    }
}
