/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueueManagerDialog.java
 *
 * Created on Jun 23, 2010, 9:34:05 AM
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.Cursor;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.irods.jargon.core.exception.JargonException;
import org.irods.jargon.idrop.desktop.systraygui.services.RefreshQueueManagerTimerTask;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.QueueManagerDetailTableModel;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.QueueManagerMasterTableModel;
import org.irods.jargon.idrop.exceptions.IdropException;
import org.irods.jargon.idrop.exceptions.IdropRuntimeException;
import org.irods.jargon.transferengine.TransferManager;
import org.irods.jargon.transferengine.domain.LocalIRODSTransfer;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mikeconway
 */
public class QueueManagerDialog extends javax.swing.JDialog implements ListSelectionListener {

    public enum ViewType {

        RECENT, ERROR, WARNING, CURRENT
    }
    private final TransferManager transferManager;
    private ViewType viewType = null;
    private iDrop iDropParent = null;
    private RefreshQueueManagerTimerTask refreshQueueManagerTimerTask = null;
    private Timer refreshQueueTimer = null;
    private LocalIRODSTransfer selectedMasterTableObject = null;
    public static org.slf4j.Logger log = LoggerFactory.getLogger(QueueManagerDialog.class);

    private int showResubmitConfirm(LocalIRODSTransfer selectedTransfer) {
        StringBuilder sb = new StringBuilder();
        sb.append("Would you like to resubmit this transfer? \n ");
        sb.append(selectedTransfer.toString());

        //default icon, custom title
        int n = JOptionPane.showConfirmDialog(
                this,
                sb.toString(),
                "Resubmit Confirmaiton",
                JOptionPane.YES_NO_OPTION);

        return n;
    }

    private int showCancelConfirm(LocalIRODSTransfer selectedTransfer) {
        StringBuilder sb = new StringBuilder();
        sb.append("Would you like to cancel this transfer? \n ");
        sb.append(selectedTransfer.toString());

        //default icon, custom title
        int n = JOptionPane.showConfirmDialog(
                this,
                sb.toString(),
                "Cancel Confirmaiton",
                JOptionPane.YES_NO_OPTION);

        return n;
    }

    public synchronized ViewType getViewType() {
        return viewType;
    }

    public synchronized void setViewType(ViewType viewType) {
        if (viewType != this.getViewType()) {
            selectedMasterTableObject = null;
        }
        this.viewType = viewType;
    }

    /** Creates new form QueueManagerDialog */
    public QueueManagerDialog(final iDrop iDropParent, final TransferManager transferManager, final ViewType viewType) throws IdropException {
        super((JFrame) null, true);

        if (transferManager == null) {
            throw new IdropException("null transferManager");
        }

        if (viewType == null) {
            throw new IdropException("null viewType");
        }

        this.transferManager = transferManager;
        this.viewType = viewType;
        this.iDropParent = iDropParent;

        initComponents();
        btnDeleteSelected.setEnabled(false);
        btnCancelSelected.setEnabled(false);
        btnResubmitSelected.setEnabled(false);
        btnRestartSelected.setEnabled(false);
        jTableMaster.setModel(new QueueManagerMasterTableModel(new ArrayList<LocalIRODSTransfer>()));
        jTableMaster.getSelectionModel().addListSelectionListener(this);
        jTableDetails.setVisible(false);
        pnlTransferInfo.setVisible(false);
        pnlErrorMessage.setVisible(false);

        refreshTableView(viewType);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDetailsDisplay = new javax.swing.ButtonGroup();
        pnlTop = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        toolbarQueueManagement = new javax.swing.JToolBar();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnPurgeAll = new javax.swing.JButton();
        btnPurgeSuccessful = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnDeleteSelected = new javax.swing.JButton();
        btnCancelSelected = new javax.swing.JButton();
        btnRestartSelected = new javax.swing.JButton();
        btnResubmitSelected = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnRefreshView = new javax.swing.JButton();
        toggleAutoRefresh = new javax.swing.JToggleButton();
        pnlCenter = new javax.swing.JPanel();
        splitQueueTableMasterAndDetail = new javax.swing.JSplitPane();
        jScrollPaneMaster = new javax.swing.JScrollPane();
        jTableMaster = new javax.swing.JTable();
        tabDetails = new javax.swing.JTabbedPane();
        pnlTransferDetailsSummary = new javax.swing.JPanel();
        pnlTransferInfo = new javax.swing.JPanel();
        lblTransferStatusLabel = new javax.swing.JLabel();
        lblTransferStatus = new javax.swing.JLabel();
        lblErrorStatusLabel = new javax.swing.JLabel();
        lblErrorStatus = new javax.swing.JLabel();
        lblTransferDateLabel = new javax.swing.JLabel();
        lblSourcePathLabel = new javax.swing.JLabel();
        lblTargetPathLabel = new javax.swing.JLabel();
        lblLastGoodPathLabel = new javax.swing.JLabel();
        jScrollPaneSourcePath = new javax.swing.JScrollPane();
        txtSourcePath = new javax.swing.JTextArea();
        jScrollPaneTargetPath = new javax.swing.JScrollPane();
        txtTargetPath = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLastGoodPath = new javax.swing.JTextArea();
        lblTransferTypeLabel = new javax.swing.JLabel();
        lblTransferType = new javax.swing.JLabel();
        lblTransferDate = new javax.swing.JLabel();
        pnlErrorMessage = new javax.swing.JPanel();
        scrollErrorMessage = new javax.swing.JScrollPane();
        txtAreaErrorMessage = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        pnlProgress = new javax.swing.JPanel();
        lblTransferred = new javax.swing.JLabel();
        lblCountSoFar = new javax.swing.JLabel();
        lblTransferredOutOf = new javax.swing.JLabel();
        lblCountOutOf = new javax.swing.JLabel();
        progressBarQueueDetails = new javax.swing.JProgressBar();
        pnlTrnasferDetailsTable = new javax.swing.JPanel();
        jScrollPaneDetails = new javax.swing.JScrollPane();
        jTableDetails = new javax.swing.JTable();
        pnlViewRadio = new javax.swing.JPanel();
        radioShowAll = new javax.swing.JRadioButton();
        radioShowError = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuView = new javax.swing.JMenu();
        jMenuCurrent = new javax.swing.JMenuItem();
        jMenuRecent = new javax.swing.JMenuItem();
        jMenuError = new javax.swing.JMenuItem();
        jMenuWarning = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("iDrop Transfer Client");
        setBounds(new java.awt.Rectangle(0, 22, 900, 1000));
        setMinimumSize(new java.awt.Dimension(900, 800));
        setResizable(false);

        lblHeader.setText("Most Recent iDrop Transfers");

        toolbarQueueManagement.setRollover(true);
        toolbarQueueManagement.add(jSeparator2);

        btnPurgeAll.setText("Purge All");
        btnPurgeAll.setToolTipText("Purge all complete and enqueued transfers");
        btnPurgeAll.setFocusable(false);
        btnPurgeAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPurgeAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPurgeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurgeAllActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(btnPurgeAll);

        btnPurgeSuccessful.setText("Purge Successful");
        btnPurgeSuccessful.setToolTipText("Purge all completed, successful transfers");
        btnPurgeSuccessful.setFocusable(false);
        btnPurgeSuccessful.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPurgeSuccessful.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPurgeSuccessful.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurgeSuccessfulActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(btnPurgeSuccessful);
        toolbarQueueManagement.add(jSeparator1);

        btnDeleteSelected.setText("Delete Selected");
        btnDeleteSelected.setToolTipText("Delete the selected transfer");
        btnDeleteSelected.setFocusable(false);
        btnDeleteSelected.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteSelected.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(btnDeleteSelected);

        btnCancelSelected.setText("Cancel Selected");
        btnCancelSelected.setToolTipText("Cancel the selected transfer");
        btnCancelSelected.setFocusable(false);
        btnCancelSelected.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelSelected.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelSelectedActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(btnCancelSelected);

        btnRestartSelected.setText("Restart selected transfer");
        btnRestartSelected.setToolTipText("Restart the selected transfer from the current checkpoint");
        btnRestartSelected.setFocusable(false);
        btnRestartSelected.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRestartSelected.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRestartSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartSelectedActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(btnRestartSelected);

        btnResubmitSelected.setText("Resubmit Selected");
        btnResubmitSelected.setToolTipText("Resubmit the selected transfer with no restart");
        btnResubmitSelected.setFocusable(false);
        btnResubmitSelected.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnResubmitSelected.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnResubmitSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResubmitSelectedActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(btnResubmitSelected);
        toolbarQueueManagement.add(jSeparator3);

        btnRefreshView.setText("Refresh View");
        btnRefreshView.setFocusable(false);
        btnRefreshView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefreshView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefreshView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshViewActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(btnRefreshView);

        toggleAutoRefresh.setText("Auto Refresh View");
        toggleAutoRefresh.setFocusable(false);
        toggleAutoRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toggleAutoRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toggleAutoRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleAutoRefreshActionPerformed(evt);
            }
        });
        toolbarQueueManagement.add(toggleAutoRefresh);

        org.jdesktop.layout.GroupLayout pnlTopLayout = new org.jdesktop.layout.GroupLayout(pnlTop);
        pnlTop.setLayout(pnlTopLayout);
        pnlTopLayout.setHorizontalGroup(
            pnlTopLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lblHeader, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(toolbarQueueManagement, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        pnlTopLayout.setVerticalGroup(
            pnlTopLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTopLayout.createSequentialGroup()
                .add(lblHeader)
                .add(toolbarQueueManagement, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pnlCenter.setMinimumSize(new java.awt.Dimension(800, 200));

        splitQueueTableMasterAndDetail.setDividerLocation(200);
        splitQueueTableMasterAndDetail.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitQueueTableMasterAndDetail.setName("splitQueueMasterAndDetail"); // NOI18N
        splitQueueTableMasterAndDetail.setOneTouchExpandable(true);

        jScrollPaneMaster.setPreferredSize(new java.awt.Dimension(454, 300));
        jScrollPaneMaster.setRequestFocusEnabled(false);

        jTableMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableMaster.setAutoCreateRowSorter(true);
        jTableMaster.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneMaster.setViewportView(jTableMaster);

        splitQueueTableMasterAndDetail.setLeftComponent(jScrollPaneMaster);

        pnlTransferDetailsSummary.setMinimumSize(new java.awt.Dimension(800, 400));
        pnlTransferDetailsSummary.setPreferredSize(new java.awt.Dimension(0, 0));

        pnlTransferInfo.setMinimumSize(new java.awt.Dimension(800, 600));
        pnlTransferInfo.setPreferredSize(new java.awt.Dimension(904, 285));

        lblTransferStatusLabel.setText("Transfer Status:");

        lblTransferStatus.setText("jLabel1");

        lblErrorStatusLabel.setText("Error Status:");

        lblErrorStatus.setText("jLabel1");

        lblTransferDateLabel.setText("Transfer Date:");

        lblSourcePathLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSourcePathLabel.setText("Source Path:");
        lblSourcePathLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        lblTargetPathLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTargetPathLabel.setText("Destination Path:");

        lblLastGoodPathLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLastGoodPathLabel.setText("Last successful transfer:");

        jScrollPaneSourcePath.setMinimumSize(new java.awt.Dimension(100, 20));

        txtSourcePath.setColumns(60);
        txtSourcePath.setEditable(false);
        txtSourcePath.setLineWrap(true);
        txtSourcePath.setRows(2);
        txtSourcePath.setMinimumSize(new java.awt.Dimension(100, 20));
        txtSourcePath.setSize(new java.awt.Dimension(100, 20));
        jScrollPaneSourcePath.setViewportView(txtSourcePath);

        jScrollPaneTargetPath.setMinimumSize(new java.awt.Dimension(100, 20));

        txtTargetPath.setColumns(60);
        txtTargetPath.setEditable(false);
        txtTargetPath.setLineWrap(true);
        txtTargetPath.setRows(2);
        txtTargetPath.setWrapStyleWord(true);
        txtTargetPath.setSize(new java.awt.Dimension(100, 20));
        jScrollPaneTargetPath.setViewportView(txtTargetPath);

        txtLastGoodPath.setColumns(40);
        txtLastGoodPath.setEditable(false);
        txtLastGoodPath.setRows(2);
        jScrollPane1.setViewportView(txtLastGoodPath);

        lblTransferTypeLabel.setText("Transfer Type:");

        lblTransferType.setText("type");

        lblTransferDate.setText("jLabel1");

        scrollErrorMessage.setMinimumSize(new java.awt.Dimension(400, 40));

        txtAreaErrorMessage.setColumns(60);
        txtAreaErrorMessage.setEditable(false);
        txtAreaErrorMessage.setRows(2);
        scrollErrorMessage.setViewportView(txtAreaErrorMessage);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Error messages:");

        org.jdesktop.layout.GroupLayout pnlErrorMessageLayout = new org.jdesktop.layout.GroupLayout(pnlErrorMessage);
        pnlErrorMessage.setLayout(pnlErrorMessageLayout);
        pnlErrorMessageLayout.setHorizontalGroup(
            pnlErrorMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlErrorMessageLayout.createSequentialGroup()
                .add(69, 69, 69)
                .add(jLabel1)
                .add(42, 42, 42)
                .add(scrollErrorMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 667, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );
        pnlErrorMessageLayout.setVerticalGroup(
            pnlErrorMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlErrorMessageLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .add(pnlErrorMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlErrorMessageLayout.createSequentialGroup()
                        .add(scrollErrorMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlErrorMessageLayout.createSequentialGroup()
                        .add(jLabel1)
                        .add(29, 29, 29))))
        );

        pnlProgress.setBackground(javax.swing.UIManager.getDefaults().getColor("TabbedPane.shadow"));

        lblTransferred.setText("Transferred ");

        lblCountSoFar.setText("0");

        lblTransferredOutOf.setText("out of ");

        lblCountOutOf.setText("0");

        org.jdesktop.layout.GroupLayout pnlProgressLayout = new org.jdesktop.layout.GroupLayout(pnlProgress);
        pnlProgress.setLayout(pnlProgressLayout);
        pnlProgressLayout.setHorizontalGroup(
            pnlProgressLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlProgressLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(lblTransferred)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblCountSoFar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(27, 27, 27)
                .add(lblTransferredOutOf)
                .add(18, 18, 18)
                .add(lblCountOutOf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(648, 648, 648))
            .add(pnlProgressLayout.createSequentialGroup()
                .addContainerGap()
                .add(progressBarQueueDetails, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 901, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlProgressLayout.setVerticalGroup(
            pnlProgressLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlProgressLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlProgressLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTransferred)
                    .add(lblTransferredOutOf)
                    .add(lblCountOutOf)
                    .add(lblCountSoFar))
                .add(18, 18, 18)
                .add(progressBarQueueDetails, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout pnlTransferInfoLayout = new org.jdesktop.layout.GroupLayout(pnlTransferInfo);
        pnlTransferInfo.setLayout(pnlTransferInfoLayout);
        pnlTransferInfoLayout.setHorizontalGroup(
            pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTransferInfoLayout.createSequentialGroup()
                .add(pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlTransferInfoLayout.createSequentialGroup()
                            .add(88, 88, 88)
                            .add(lblTransferStatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTransferStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(88, 88, 88)
                            .add(lblErrorStatusLabel)
                            .add(18, 18, 18)
                            .add(lblErrorStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(31, 31, 31)
                            .add(lblTransferDateLabel)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTransferDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(pnlTransferInfoLayout.createSequentialGroup()
                            .add(99, 99, 99)
                            .add(lblTransferTypeLabel)
                            .add(18, 18, 18)
                            .add(lblTransferType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(pnlTransferInfoLayout.createSequentialGroup()
                        .add(58, 58, 58)
                        .add(pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(lblLastGoodPathLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblTargetPathLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblSourcePathLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jScrollPane1)
                            .add(jScrollPaneTargetPath, 0, 0, Short.MAX_VALUE)
                            .add(jScrollPaneSourcePath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlTransferInfoLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(pnlErrorMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(112, 112, 112))
            .add(pnlTransferInfoLayout.createSequentialGroup()
                .add(9, 9, 9)
                .add(pnlProgress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1016, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTransferInfoLayout.setVerticalGroup(
            pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTransferInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTransferStatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTransferStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblErrorStatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblErrorStatus)
                    .add(lblTransferDateLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTransferDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTransferTypeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTransferType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(pnlTransferInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlTransferInfoLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPaneSourcePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPaneTargetPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlTransferInfoLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblSourcePathLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTargetPathLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(lblLastGoodPathLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(32, 32, 32)
                .add(pnlProgress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(pnlErrorMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout pnlTransferDetailsSummaryLayout = new org.jdesktop.layout.GroupLayout(pnlTransferDetailsSummary);
        pnlTransferDetailsSummary.setLayout(pnlTransferDetailsSummaryLayout);
        pnlTransferDetailsSummaryLayout.setHorizontalGroup(
            pnlTransferDetailsSummaryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTransferDetailsSummaryLayout.createSequentialGroup()
                .add(36, 36, 36)
                .add(pnlTransferInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTransferDetailsSummaryLayout.setVerticalGroup(
            pnlTransferDetailsSummaryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTransferDetailsSummaryLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlTransferInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 481, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabDetails.addTab("TransferSummary", null, pnlTransferDetailsSummary, "Summary information about the selected transfer");

        jScrollPaneDetails.setPreferredSize(new java.awt.Dimension(454, 200));

        jTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableDetails.setAutoCreateRowSorter(true);
        jTableDetails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneDetails.setViewportView(jTableDetails);

        btnGroupDetailsDisplay.add(radioShowAll);
        radioShowAll.setText("Show all items");
        radioShowAll.setToolTipText("List all transfer items in detail");
        radioShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioShowAllActionPerformed(evt);
            }
        });

        btnGroupDetailsDisplay.add(radioShowError);
        radioShowError.setSelected(true);
        radioShowError.setText("Show error items only");
        radioShowError.setToolTipText("Show only transfer items that were in error");
        radioShowError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioShowErrorActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlViewRadioLayout = new org.jdesktop.layout.GroupLayout(pnlViewRadio);
        pnlViewRadio.setLayout(pnlViewRadioLayout);
        pnlViewRadioLayout.setHorizontalGroup(
            pnlViewRadioLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlViewRadioLayout.createSequentialGroup()
                .add(9, 9, 9)
                .add(radioShowAll)
                .add(5, 5, 5)
                .add(radioShowError)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlViewRadioLayout.setVerticalGroup(
            pnlViewRadioLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlViewRadioLayout.createSequentialGroup()
                .add(5, 5, 5)
                .add(pnlViewRadioLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(radioShowAll)
                    .add(radioShowError)))
        );

        org.jdesktop.layout.GroupLayout pnlTrnasferDetailsTableLayout = new org.jdesktop.layout.GroupLayout(pnlTrnasferDetailsTable);
        pnlTrnasferDetailsTable.setLayout(pnlTrnasferDetailsTableLayout);
        pnlTrnasferDetailsTableLayout.setHorizontalGroup(
            pnlTrnasferDetailsTableLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlTrnasferDetailsTableLayout.createSequentialGroup()
                .addContainerGap(401, Short.MAX_VALUE)
                .add(pnlViewRadio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(367, 367, 367))
            .add(pnlTrnasferDetailsTableLayout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jScrollPaneDetails, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE))
        );
        pnlTrnasferDetailsTableLayout.setVerticalGroup(
            pnlTrnasferDetailsTableLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTrnasferDetailsTableLayout.createSequentialGroup()
                .add(22, 22, 22)
                .add(pnlViewRadio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jScrollPaneDetails, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 451, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabDetails.addTab("Transfer Details", pnlTrnasferDetailsTable);

        splitQueueTableMasterAndDetail.setRightComponent(tabDetails);

        org.jdesktop.layout.GroupLayout pnlCenterLayout = new org.jdesktop.layout.GroupLayout(pnlCenter);
        pnlCenter.setLayout(pnlCenterLayout);
        pnlCenterLayout.setHorizontalGroup(
            pnlCenterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlCenterLayout.createSequentialGroup()
                .addContainerGap()
                .add(splitQueueTableMasterAndDetail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        pnlCenterLayout.setVerticalGroup(
            pnlCenterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlCenterLayout.createSequentialGroup()
                .addContainerGap()
                .add(splitQueueTableMasterAndDetail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 766, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenuView.setText("View");

        jMenuCurrent.setMnemonic('C');
        jMenuCurrent.setText("Current");
        jMenuCurrent.setToolTipText("Show the queue of transfers waiting to process");
        jMenuCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCurrentActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuCurrent);

        jMenuRecent.setMnemonic('R');
        jMenuRecent.setText("Recent");
        jMenuRecent.setToolTipText("Show the last transfers in the queue");
        jMenuRecent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRecentActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuRecent);

        jMenuError.setMnemonic('E');
        jMenuError.setText("Error");
        jMenuError.setToolTipText("Show transfers that had an error");
        jMenuError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuErrorActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuError);

        jMenuWarning.setMnemonic('W');
        jMenuWarning.setText("Warning");
        jMenuWarning.setToolTipText("Show transfers that had a warning.");
        jMenuWarning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuWarningActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuWarning);

        jMenuBar1.add(jMenuView);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(pnlCenter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(pnlTop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlCenter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioShowAllActionPerformed
        if (radioShowAll.isSelected()) {
            adjustDetails();
        }
    }//GEN-LAST:event_radioShowAllActionPerformed

    private void radioShowErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioShowErrorActionPerformed
        if (radioShowError.isSelected()) {
            adjustDetails();
        }
    }//GEN-LAST:event_radioShowErrorActionPerformed

    private void jMenuCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCurrentActionPerformed
        refreshTableView(QueueManagerDialog.ViewType.CURRENT);

    }//GEN-LAST:event_jMenuCurrentActionPerformed

    private void jMenuRecentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRecentActionPerformed
        refreshTableView(QueueManagerDialog.ViewType.RECENT);

    }//GEN-LAST:event_jMenuRecentActionPerformed

    private void jMenuErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuErrorActionPerformed
        refreshTableView(QueueManagerDialog.ViewType.ERROR);

    }//GEN-LAST:event_jMenuErrorActionPerformed

    private void jMenuWarningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuWarningActionPerformed
        refreshTableView(QueueManagerDialog.ViewType.WARNING);
    }//GEN-LAST:event_jMenuWarningActionPerformed

    private void btnPurgeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurgeAllActionPerformed
        try {
            iDropParent.getTransferManager().purgeAllTransfers();
            refreshTableView(viewType);
            resetDisplayFieldsAndStatus();
        } catch (Exception ex) {
            Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
            iDropParent.showIdropException(ex);
        }
    }//GEN-LAST:event_btnPurgeAllActionPerformed

    private void btnPurgeSuccessfulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurgeSuccessfulActionPerformed
        try {
            iDropParent.getTransferManager().purgeSuccessfulTransfers();
            refreshTableView(viewType);
            resetDisplayFieldsAndStatus();

        } catch (Exception ex) {
            Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
            iDropParent.showIdropException(ex);
        }
    }//GEN-LAST:event_btnPurgeSuccessfulActionPerformed

    private void btnDeleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedActionPerformed
        // TODO add your handling code here:
        if (jTableMaster.getSelectedRow() > -1) {
            log.info("no row selected");
            return;
        }

        // get the transfer at the selected row
        QueueManagerMasterTableModel tableModel = (QueueManagerMasterTableModel) jTableMaster.getModel();
        LocalIRODSTransfer selectedTransfer = tableModel.getTransferAtRow(jTableMaster.getSelectedRow());

        int dialogReturn = showDeleteConfirm(selectedTransfer);

        if (dialogReturn == JOptionPane.YES_OPTION) {
        }



    }//GEN-LAST:event_btnDeleteSelectedActionPerformed

    private void btnRestartSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartSelectedActionPerformed

        if (jTableMaster.getSelectedRow() == -1) {
            log.info("restart, no transfer selected");
            return;
        }

        // get the transfer at the selected row
        QueueManagerMasterTableModel tableModel = (QueueManagerMasterTableModel) jTableMaster.getModel();
        LocalIRODSTransfer selectedTransfer = tableModel.getTransferAtRow(jTableMaster.getSelectedRow());

        int dialogReturn = showRestartConfirm(selectedTransfer);

        if (dialogReturn == JOptionPane.YES_OPTION) {
            try {
                transferManager.restartTransfer(selectedTransfer);
            } catch (Exception ex) {
                Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                iDropParent.showIdropException(ex);
            }

            refreshTableView(this.getViewType());
        }

    }//GEN-LAST:event_btnRestartSelectedActionPerformed

    private void btnResubmitSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResubmitSelectedActionPerformed

        if (jTableMaster.getSelectedRow() == -1) {
            log.info("resubmit, no transfer selected");
            return;
        }

        // get the transfer at the selected row
        QueueManagerMasterTableModel tableModel = (QueueManagerMasterTableModel) jTableMaster.getModel();
        LocalIRODSTransfer selectedTransfer = tableModel.getTransferAtRow(jTableMaster.getSelectedRow());

        int dialogReturn = showResubmitConfirm(selectedTransfer);

        if (dialogReturn == JOptionPane.YES_OPTION) {
            try {
                transferManager.resubmitTransfer(selectedTransfer);
            } catch (Exception ex) {
                Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                iDropParent.showIdropException(ex);
            }

            refreshTableView(this.getViewType());


        }

    }//GEN-LAST:event_btnResubmitSelectedActionPerformed

    private void btnCancelSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelSelectedActionPerformed

        if (jTableMaster.getSelectedRow() == -1) {
            log.info("cancel, no transfer selected");
            return;
        }

        // get the transfer at the selected row
        QueueManagerMasterTableModel tableModel = (QueueManagerMasterTableModel) jTableMaster.getModel();
        LocalIRODSTransfer selectedTransfer = tableModel.getTransferAtRow(jTableMaster.getSelectedRow());

        int dialogReturn = showCancelConfirm(selectedTransfer);

        if (dialogReturn == JOptionPane.YES_OPTION) {
            try {
                transferManager.cancelTransfer(selectedTransfer);
                refreshTableView(this.getViewType());
            } catch (Exception ex) {
                Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                iDropParent.showIdropException(ex);
            }

            refreshTableView(this.getViewType());

        }


    }//GEN-LAST:event_btnCancelSelectedActionPerformed

    private void btnRefreshViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshViewActionPerformed
        refreshTableView(this.getViewType());
    }//GEN-LAST:event_btnRefreshViewActionPerformed

    private void toggleAutoRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleAutoRefreshActionPerformed

        if (toggleAutoRefresh.isSelected()) {
            // launch auto refresh thread

            log.info("creating timer for queue manager dialog refresh");
            refreshQueueTimer = new Timer();
            try {
                refreshQueueManagerTimerTask = RefreshQueueManagerTimerTask.instance(this);
                refreshQueueTimer.scheduleAtFixedRate(refreshQueueManagerTimerTask, 0, 10000);
            } catch (IdropException ex) {
                Logger.getLogger(iDrop.class.getName()).log(Level.SEVERE, null, ex);
                iDropParent.showIdropException(ex);
                return;
            }
        } else {
            // cancel auto refresh thread
            if (refreshQueueTimer != null) {
                log.info("refreshQueueTimer is not null, cancel current refresh timer");
                refreshQueueTimer.cancel();
                refreshQueueManagerTimerTask = null;
                refreshQueueTimer = null;
            }
        }
    }//GEN-LAST:event_toggleAutoRefreshActionPerformed

    /**
     * Refresh the data in the queue table from the database.  This method will automatically maintain the view
     * on whatever the currently selected transfer is.  If that transfer is not in the view, it will select the
     * first transfer depicted.
     * @param viewType
     */
    public void refreshTableView(final ViewType viewType) {

        final QueueManagerDialog queueManagerDialog = this;


        final QueueManagerMasterTableModel masterTableModel = (QueueManagerMasterTableModel) jTableMaster.getModel();
        int selectedRow = jTableMaster.getSelectedRow();

        if (masterTableModel.getRowCount() > 0) {
            if (selectedRow == -1) {
                selectedRow = 0;
            }

            selectedMasterTableObject = (LocalIRODSTransfer) masterTableModel.getTransferAtRow(selectedRow);

        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {

                queueManagerDialog.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                log.info("refreshing master table for view type:{}", viewType);

                if (viewType == null) {
                    queueManagerDialog.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

                    throw new IdropRuntimeException("null viewType");
                }

                List<LocalIRODSTransfer> transferQueue = null;

                if (viewType == ViewType.CURRENT) {
                    try {
                        transferQueue = transferManager.getCurrentQueue();
                        queueManagerDialog.getLblHeader().setText("Current transfer queue");

                    } catch (Exception ex) {
                        Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                        throw new IdropRuntimeException(ex);
                    }
                } else if (viewType == ViewType.RECENT) {
                    try {
                        transferQueue = transferManager.getRecentQueue();
                        queueManagerDialog.getLblHeader().setText("Recent transfer activity");

                    } catch (Exception ex) {
                        Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                        throw new IdropRuntimeException(ex);
                    }
                } else if (viewType == ViewType.ERROR) {
                    try {
                        transferQueue = transferManager.getErrorQueue();
                        queueManagerDialog.getLblHeader().setText("Transfer activities with errors");

                    } catch (Exception ex) {
                        Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                        throw new IdropRuntimeException(ex);
                    }
                } else if (viewType == ViewType.WARNING) {
                    try {
                        transferQueue = transferManager.getWarningQueue();
                        queueManagerDialog.getLblHeader().setText("Transfer activities with warnings");

                    } catch (Exception ex) {
                        Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                        throw new IdropRuntimeException(ex);
                    }
                }

                queueManagerDialog.setViewType(viewType);

                if (transferQueue != null) {
                    jTableMaster.setModel(new QueueManagerMasterTableModel(transferQueue));
                    int matchingRowForSelected = -1;


                    if (selectedMasterTableObject != null) {
                        // previously selected table, refresh display, first, selecting same row

                        LocalIRODSTransfer transfer;
                        for (int i = 0; i < jTableMaster.getModel().getRowCount(); i++) {
                            transfer = masterTableModel.getTransferAtRow(i);
                            if (transfer.getId() == selectedMasterTableObject.getId()) {
                                matchingRowForSelected = i;
                                break;
                            }

                        }

                        if (matchingRowForSelected != -1) {
                            int selectedRowIndex = jTableMaster.convertRowIndexToView(matchingRowForSelected);
                            if (selectedRowIndex != -1) {
                                jTableMaster.setRowSelectionInterval(selectedRowIndex, selectedRowIndex);
                            }
                        }


                    } else {
                        jTableDetails.setVisible(false);
                    }

                }

                queueManagerDialog.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelSelected;
    private javax.swing.JButton btnDeleteSelected;
    private javax.swing.ButtonGroup btnGroupDetailsDisplay;
    private javax.swing.JButton btnPurgeAll;
    private javax.swing.JButton btnPurgeSuccessful;
    private javax.swing.JButton btnRefreshView;
    private javax.swing.JButton btnRestartSelected;
    private javax.swing.JButton btnResubmitSelected;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuCurrent;
    private javax.swing.JMenuItem jMenuError;
    private javax.swing.JMenuItem jMenuRecent;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JMenuItem jMenuWarning;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneDetails;
    private javax.swing.JScrollPane jScrollPaneMaster;
    private javax.swing.JScrollPane jScrollPaneSourcePath;
    private javax.swing.JScrollPane jScrollPaneTargetPath;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JTable jTableDetails;
    private javax.swing.JTable jTableMaster;
    private javax.swing.JLabel lblCountOutOf;
    private javax.swing.JLabel lblCountSoFar;
    private javax.swing.JLabel lblErrorStatus;
    private javax.swing.JLabel lblErrorStatusLabel;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblLastGoodPathLabel;
    private javax.swing.JLabel lblSourcePathLabel;
    private javax.swing.JLabel lblTargetPathLabel;
    private javax.swing.JLabel lblTransferDate;
    private javax.swing.JLabel lblTransferDateLabel;
    private javax.swing.JLabel lblTransferStatus;
    private javax.swing.JLabel lblTransferStatusLabel;
    private javax.swing.JLabel lblTransferType;
    private javax.swing.JLabel lblTransferTypeLabel;
    private javax.swing.JLabel lblTransferred;
    private javax.swing.JLabel lblTransferredOutOf;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlErrorMessage;
    private javax.swing.JPanel pnlProgress;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JPanel pnlTransferDetailsSummary;
    private javax.swing.JPanel pnlTransferInfo;
    private javax.swing.JPanel pnlTrnasferDetailsTable;
    private javax.swing.JPanel pnlViewRadio;
    private javax.swing.JProgressBar progressBarQueueDetails;
    private javax.swing.JRadioButton radioShowAll;
    private javax.swing.JRadioButton radioShowError;
    private javax.swing.JScrollPane scrollErrorMessage;
    private javax.swing.JSplitPane splitQueueTableMasterAndDetail;
    private javax.swing.JTabbedPane tabDetails;
    private javax.swing.JToggleButton toggleAutoRefresh;
    private javax.swing.JToolBar toolbarQueueManagement;
    private javax.swing.JTextArea txtAreaErrorMessage;
    private javax.swing.JTextArea txtLastGoodPath;
    private javax.swing.JTextArea txtSourcePath;
    private javax.swing.JTextArea txtTargetPath;
    // End of variables declaration//GEN-END:variables

    public JLabel getLblHeader() {
        return lblHeader;
    }

    public void setLblHeader(JLabel lblHeader) {
        this.lblHeader = lblHeader;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {

        if (e.getValueIsAdjusting()) {
            return;
        }

        if (e.getFirstIndex() == -1 || e.getLastIndex() == -1 || jTableMaster.getSelectedRow() == -1) {
            return;
        }

        adjustDetails();
        pnlTransferInfo.setVisible(true);

    }

    private void adjustDetails() {
        final LocalIRODSTransfer localIRODSTransfer = ((QueueManagerMasterTableModel) jTableMaster.getModel()).getTransferAtRow(jTableMaster.getSelectedRow());
        log.info("selected transfer:{}", localIRODSTransfer);
        final boolean showAll = radioShowAll.isSelected();

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                // initialize panel info
                lblTransferType.setText(localIRODSTransfer.getTransferType());
                lblTransferDate.setText(localIRODSTransfer.getTransferStart().toString());
                lblTransferStatus.setText(localIRODSTransfer.getTransferState());
                lblErrorStatus.setText(localIRODSTransfer.getTransferErrorStatus());

                // set source and target properly based on activity (put, get, etc)

                if (localIRODSTransfer.getTransferType().equals(LocalIRODSTransfer.TRANSFER_TYPE_GET)) {
                    txtSourcePath.setText(localIRODSTransfer.getIrodsAbsolutePath());
                    txtTargetPath.setText(localIRODSTransfer.getLocalAbsolutePath());
                } else if (localIRODSTransfer.getTransferType().equals(LocalIRODSTransfer.TRANSFER_TYPE_PUT)) {
                    txtSourcePath.setText(localIRODSTransfer.getLocalAbsolutePath());
                    txtTargetPath.setText(localIRODSTransfer.getIrodsAbsolutePath());
                } else if (localIRODSTransfer.getTransferType().equals(LocalIRODSTransfer.TRANSFER_TYPE_REPLICATE)) {
                    txtSourcePath.setText(localIRODSTransfer.getIrodsAbsolutePath());
                    txtTargetPath.setText("");
                } else {
                    log.error("unable to build details for transfer with transfer type of:{}", localIRODSTransfer.getTransferType());
                    iDropParent.showIdropException(new IdropException("unable to build details for this transfer type"));
                    return;
                }

                txtLastGoodPath.setText(localIRODSTransfer.getLastSuccessfulPath());
                log.debug("total files transferred:{}", localIRODSTransfer.getTotalFilesTransferredSoFar());
                log.debug("out of: {}", localIRODSTransfer.getTotalFilesCount());
                lblCountSoFar.setText(String.valueOf(localIRODSTransfer.getTotalFilesTransferredSoFar()));
                lblCountOutOf.setText(String.valueOf(localIRODSTransfer.getTotalFilesCount()));
                progressBarQueueDetails.setMinimum(0);
                progressBarQueueDetails.setMaximum(localIRODSTransfer.getTotalFilesCount());
                progressBarQueueDetails.setValue(localIRODSTransfer.getTotalFilesTransferredSoFar());

                if (localIRODSTransfer.getGlobalException() != null) {
                    txtAreaErrorMessage.setText(localIRODSTransfer.getGlobalException());
                    pnlErrorMessage.setVisible(true);
                } else {
                    pnlErrorMessage.setVisible(false);
                }

                // initialize the detail values via hibernate (they are lazily loaded)
                log.info("get the details based on the selected option");

                try {
                    if (showAll) {
                        log.info("showing all transfers based on radio selection");

                        jTableDetails.setModel(new QueueManagerDetailTableModel(transferManager.getAllTransferItemsForTransfer(localIRODSTransfer.getId())));
                    } else {
                        jTableDetails.setModel(new QueueManagerDetailTableModel(transferManager.getErrorTransferItemsForTransfer(localIRODSTransfer.getId())));
                    }

                } catch (Exception ex) {
                    Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
                    iDropParent.showIdropException(ex);
                    return;
                }

                // adjust the various command buttons based on the nature of the transfer item
                if (localIRODSTransfer.getTransferState().equals(LocalIRODSTransfer.TRANSFER_STATE_PROCESSING)) {
                    btnDeleteSelected.setEnabled(false);
                    btnRestartSelected.setEnabled(false);
                    btnResubmitSelected.setEnabled(false);
                    btnCancelSelected.setEnabled(true);
                } else if (localIRODSTransfer.getTransferState().equals(LocalIRODSTransfer.TRANSFER_STATE_COMPLETE)
                        || localIRODSTransfer.getTransferState().equals(LocalIRODSTransfer.TRANSFER_STATE_CANCELLED)) {
                    btnDeleteSelected.setEnabled(true);
                    btnRestartSelected.setEnabled(true);
                    btnResubmitSelected.setEnabled(true);
                    btnCancelSelected.setEnabled(false);
                } else if (localIRODSTransfer.getTransferState().equals(LocalIRODSTransfer.TRANSFER_STATE_ENQUEUED)) {
                    btnDeleteSelected.setEnabled(false);
                    btnCancelSelected.setEnabled(true);
                    btnResubmitSelected.setEnabled(false);
                    btnRestartSelected.setEnabled(false);
                } else {
                    btnDeleteSelected.setEnabled(false);
                    btnCancelSelected.setEnabled(false);
                    btnResubmitSelected.setEnabled(false);
                    btnRestartSelected.setEnabled(false);
                }

                jTableDetails.setVisible(true);
                jScrollPaneSourcePath.validate();
                jScrollPaneTargetPath.validate();

            }
        });
    }

    public int showDeleteConfirm(final LocalIRODSTransfer localIRODSTransfer) {

        StringBuilder sb = new StringBuilder();
        sb.append("Would you like to delete this transfer? \n ");
        sb.append(localIRODSTransfer.toString());

        //default icon, custom title
        int n = JOptionPane.showConfirmDialog(
                this,
                sb.toString(),
                "Delete Confirmaiton",
                JOptionPane.YES_NO_OPTION);

        return n;
    }

    public int showRestartConfirm(final LocalIRODSTransfer localIRODSTransfer) {

        StringBuilder sb = new StringBuilder();
        sb.append("Would you like to retart this transfer? \n ");
        sb.append(localIRODSTransfer.toString());

        //default icon, custom title
        int n = JOptionPane.showConfirmDialog(
                this,
                sb.toString(),
                "Restart Confirmaiton",
                JOptionPane.YES_NO_OPTION);

        return n;
    }

    private void resetDisplayFieldsAndStatus() {
        try {
            iDropParent.getTransferManager().resetStatus();
        } catch (Exception ex) {
            Logger.getLogger(QueueManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
            // log and continue...not useful to user
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                lblTransferType.setText("");
                lblTransferDate.setText("");
                lblTransferStatus.setText("");
                txtSourcePath.setText("");
                txtTargetPath.setText("");
                txtAreaErrorMessage.setText("");
                txtLastGoodPath.setText("");

            }
        });
    }
}
