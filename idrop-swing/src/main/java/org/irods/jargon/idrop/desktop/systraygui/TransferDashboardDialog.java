/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.JPanel;
import org.irods.jargon.conveyor.core.ConveyorExecutionException;
import static org.irods.jargon.idrop.desktop.systraygui.TransferDashboardDialog.log;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.DashboardLayoutService;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.DashboardAttempt;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.TransferDashboardLayout;
import org.irods.jargon.idrop.exceptions.IdropRuntimeException;
import org.irods.jargon.transfer.dao.domain.Transfer;
import org.openide.util.Exceptions;
import org.slf4j.LoggerFactory;

/**
 * @author Mike
 */
public class TransferDashboardDialog extends javax.swing.JDialog {

    public static org.slf4j.Logger log = LoggerFactory.getLogger(TransferDashboardDialog.class);
    protected final Transfer transfer;
    private final IDROPCore idropCore;

    /**
     * Creates new form TransferDashboardDialog
     */
    public TransferDashboardDialog(javax.swing.JDialog parent, Transfer transfer, IDROPCore idropCore) {
        super(parent, true);


        if (transfer == null) {
            throw new IllegalArgumentException("null transfer");
        }

        this.idropCore = idropCore;
        try {
            this.transfer = idropCore.getConveyorService().getQueueManagerService().initializeGivenTransferByLoadingChildren(transfer);
        } catch (ConveyorExecutionException ex) {
            MessageManager.showError(this, ex.getMessage());

            throw new IdropRuntimeException(ex);
        }

        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDashboard = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 700));

        pnlDashboard.setPreferredSize(new java.awt.Dimension(800, 600));
        pnlDashboard.setLayout(new java.awt.GridLayout());
        getContentPane().add(pnlDashboard, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlDashboard;
    // End of variables declaration//GEN-END:variables

    private void initData() {
        log.info("initData()");
        log.info("making sure transfer attemtps are expanded...");
        buildDashboardForTransfer();

    }

    private void buildDashboardForTransfer() {

        final TransferDashboardDialog dialog = this;


        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MyPanel myPanel = new MyPanel(transfer);
                myPanel.setSize(800, 600);
                myPanel.setBackground(Color.WHITE);
                pnlDashboard.add(myPanel);
                dialog.repaint();
            }
        });
    }
}

class MyPanel extends JPanel {

    private Transfer transfer;

    public MyPanel(Transfer transfer) {
        this.transfer = transfer;
    }

    protected void paintComponent(Graphics g) {
        log.info("getting layout info for dashboard");
        TransferDashboardLayout layout = DashboardLayoutService.layoutDashboard(transfer);
        log.info("layout:{}", layout);

        Graphics2D g2 = (Graphics2D) g;

        int nextX = 0;
        int nextY = 0;

        int width = 800;
        int height = 600;

        for (DashboardAttempt attempt : layout.getDashboardAttempts()) {
            // set fill grey for skipped
            g2.setColor(Color.BLUE);

            int widthThisBar = Math.round(width * (float) (attempt.getPercentWidth() / 100));

            int heightSkipped = 0;
            int heightTransferred = 0;
            int heightError = 0;
            nextY = height;

            if (attempt.getPercentHeightSkipped() > 0) {

                heightSkipped = Math.round(height * (float) (attempt.getPercentHeightSkipped() / 100));

                if (heightSkipped == 0) {
                    heightSkipped = 2;
                }

                g2.fillRect(nextX, nextY - heightSkipped, widthThisBar, heightSkipped);
                nextY -= heightSkipped;
            }


            if (attempt.getPercentHeightTransferred() > 0) {
                g2.setColor(Color.GREEN);
                heightTransferred = Math.round(height * (float) (attempt.getPercentHeightTransferred() / 100));

                if (heightTransferred == 0) {
                    heightTransferred = 2;
                }


                g2.fillRect(nextX, nextY - heightTransferred, widthThisBar, heightTransferred);
                nextY -= heightTransferred;

            }

            if (attempt.getPercentHeightError() > 0) {

                g2.setColor(Color.RED);
                 heightError = Math.round(height * (float) (attempt.getPercentHeightError() / 100));

                if (heightError == 0) {
                    heightError = 2;
                }


                g2.fillRect(nextX, nextY - heightError, widthThisBar, heightError);
            }

            nextX += widthThisBar;

        }

    }
}
