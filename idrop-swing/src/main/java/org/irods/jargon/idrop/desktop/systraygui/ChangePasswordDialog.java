/*
 * PreferencesDialog.java
 *
 * Created on Nov 23, 2010, 2:58:18 PM
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.irods.jargon.conveyor.core.ConveyorExecutionException;
import org.irods.jargon.conveyor.core.GridAccountService;
import org.irods.jargon.core.connection.IRODSAccount;
import org.irods.jargon.core.exception.JargonException;
import org.irods.jargon.core.pub.UserAO;
import org.irods.jargon.transfer.exception.CannotUpdateTransferInProgressException;
import org.irods.jargon.transfer.exception.PassPhraseInvalidException;
import org.slf4j.LoggerFactory;

/**
 * Dialog that can manage preferences
 * 
 * @author mikeconway
 */
public class ChangePasswordDialog extends javax.swing.JDialog {

    private final iDrop idrop;
    private final IRODSAccount irodsAccount;
    private String newPsswd = null;
    public static org.slf4j.Logger log = LoggerFactory.getLogger(ChangePasswordDialog.class);

    /** Creates new form PreferencesDialog */
    public ChangePasswordDialog(final JDialog parent, final boolean modal, iDrop idrop, IRODSAccount irodsAccount) {
        super(parent, modal);
        this.idrop = idrop;
        this.irodsAccount = irodsAccount;
        initComponents();
        setUpPasswordPanel();
        
        this.getRootPane().setDefaultButton(btnUpdatePassword);
    }
    
    
    public String getNewPassword() {
        return this.newPsswd;
    }
    
    // check to see if given irods account is the one currently logged in
    private boolean isLoggedInIrodsAccount(IRODSAccount acct) {

        return  ((idrop.getIrodsAccount().getHost().equals(acct.getHost())) &&
            (idrop.getIrodsAccount().getPort() == acct.getPort()) &&
            (idrop.getIrodsAccount().getZone().equals(acct.getZone())) &&
            (idrop.getIrodsAccount().getUserName().equals(acct.getUserName())));
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlCurrentGrid = new javax.swing.JPanel();
        lblHostLabel = new javax.swing.JLabel();
        lblHost = new javax.swing.JLabel();
        lblPortLabel = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        lblZoneLabel = new javax.swing.JLabel();
        lblZone = new javax.swing.JLabel();
        lblResourceLabel = new javax.swing.JLabel();
        lblResource = new javax.swing.JLabel();
        lblUserNameLabel = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        pnlPasswords = new javax.swing.JPanel();
        lblNewPassword = new javax.swing.JLabel();
        passwdNewPassword = new javax.swing.JPasswordField();
        lblConfirmPassword = new javax.swing.JLabel();
        passwdConfirmPassword = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        pnlPasswordButtons = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnUpdatePassword = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("iDrop - Change Password");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(250, 150));
        setPreferredSize(new java.awt.Dimension(350, 250));

        pnlCurrentGrid.setLayout(new java.awt.GridBagLayout());

        lblHostLabel.setText("Host: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCurrentGrid.add(lblHostLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCurrentGrid.add(lblHost, gridBagConstraints);

        lblPortLabel.setText("Port: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCurrentGrid.add(lblPortLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCurrentGrid.add(lblPort, gridBagConstraints);

        lblZoneLabel.setText("Zone: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCurrentGrid.add(lblZoneLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCurrentGrid.add(lblZone, gridBagConstraints);

        lblResourceLabel.setText("Default Resource: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCurrentGrid.add(lblResourceLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCurrentGrid.add(lblResource, gridBagConstraints);

        lblUserNameLabel.setText("User Name: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCurrentGrid.add(lblUserNameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCurrentGrid.add(lblUserName, gridBagConstraints);

        pnlPasswords.setLayout(new java.awt.GridBagLayout());

        lblNewPassword.setText("New password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlPasswords.add(lblNewPassword, gridBagConstraints);

        passwdNewPassword.setColumns(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlPasswords.add(passwdNewPassword, gridBagConstraints);

        lblConfirmPassword.setText("Confirm password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlPasswords.add(lblConfirmPassword, gridBagConstraints);

        passwdConfirmPassword.setColumns(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlPasswords.add(passwdConfirmPassword, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        pnlCurrentGrid.add(pnlPasswords, gridBagConstraints);

        getContentPane().add(pnlCurrentGrid, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanel2, java.awt.BorderLayout.WEST);

        btnCancel.setMnemonic('c');
        btnCancel.setText("Cancel");
        btnCancel.setToolTipText("Cancel the password change");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlPasswordButtons.add(btnCancel);

        btnUpdatePassword.setMnemonic('P');
        btnUpdatePassword.setText("Update Password");
        btnUpdatePassword.setToolTipText("Change the current password to the new values");
        btnUpdatePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePasswordActionPerformed(evt);
            }
        });
        pnlPasswordButtons.add(btnUpdatePassword);

        jPanel1.add(pnlPasswordButtons, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdatePasswordActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnUpdatePasswordActionPerformed
        
        log.info("changing password, doing edits first");
        initializePasswordColors();

        if (passwdNewPassword.getPassword().length == 0) {
            passwdNewPassword.setBackground(Color.red);
        }

        if (passwdConfirmPassword.getPassword().length == 0) {
            passwdConfirmPassword.setBackground(Color.red);
        }

        if (passwdNewPassword.getPassword().length == 0
                || passwdConfirmPassword.getPassword().length == 0) {
            JOptionPane.showMessageDialog(this,
                    "New or confirm password is missing");
            return;
        }

        String newPassword = new String(passwdNewPassword.getPassword());
        String confirmPassword = new String(passwdConfirmPassword.getPassword());

        if (newPassword.equals(confirmPassword)) {
            // passwords match
        } else {
            passwdNewPassword.setBackground(Color.red);
            passwdConfirmPassword.setBackground(Color.red);
            JOptionPane.showMessageDialog(this,
                    "New and confirm password do not match");
            return;
        }

        log.info("edits pass, updating password");
        
        try {
            log.info("check queue for any jobs for the account, these have the old password.");
//            IRODSAccount irodsAccount = idrop.getIrodsAccount();

          //FIXME:conveyor  idrop.getiDropCore().getTransferManager().updatePassword(irodsAccount, newPassword);
            UserAO userAO = idrop.getiDropCore().getIrodsFileSystem().getIRODSAccessObjectFactory().getUserAO(irodsAccount);
            userAO.changeAUserPasswordByThatUser(irodsAccount.getUserName(),
                    irodsAccount.getPassword(), newPassword);
            log.info("password changed, resetting iRODS Account and grid account");
            
            IRODSAccount newAccount = new IRODSAccount(irodsAccount.getHost(),
                    irodsAccount.getPort(), irodsAccount.getUserName(),
                    newPassword, irodsAccount.getHomeDirectory(),
                    irodsAccount.getZone(),
                    irodsAccount.getDefaultStorageResource());
            newAccount.setAuthenticationScheme(irodsAccount.getAuthenticationScheme());
            
            // now update password in grid account
            try {
                idrop.getiDropCore().getConveyorService().getGridAccountService().addOrUpdateGridAccountBasedOnIRODSAccount(newAccount);
                // use this when Mike adds comment to addOrUpdateGridAccountBasedOnIRODSAccount()
                // gridAccountService.addOrUpdateGridAccountBasedOnIRODSAccount(gridInfo, comment);
            } catch (PassPhraseInvalidException ex) {
                Logger.getLogger(EditGridInfoDialog.class.getName()).log(
                        Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                    this,
                    "Update of grid account failed. Pass phrase is invalid.",
                    "Change Password", JOptionPane.ERROR_MESSAGE);
            } catch (ConveyorExecutionException ex) {
                Logger.getLogger(EditGridInfoDialog.class.getName()).log(
                        Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                    this,
                    "Update of grid account failed.",
                    "Change Password", JOptionPane.ERROR_MESSAGE);
            }
            
            // may be different actions for dialog depending if launched from iDrop or Edit Grid dialog
            // don't do this if not logged in yet
            // also may be changing password for account not currently in use!
            if ((idrop.getIrodsAccount() != null) && (isLoggedInIrodsAccount(newAccount))) {
                idrop.setIrodsAccount(newAccount);
                idrop.reinitializeForChangedIRODSAccount();
            }
            
            this.newPsswd = newPassword;
            JOptionPane.showMessageDialog(this, "Password was changed");

        } catch (CannotUpdateTransferInProgressException ex) {
            JOptionPane.showMessageDialog(
                    this,
                    "Transfers for this account are pending, this account can not be changed until completed and purged");
            return;
        } catch (JargonException ex) {
            Logger.getLogger(ChangePasswordDialog.class.getName()).log(
                    Level.SEVERE, null, ex);
        } finally {
            if (idrop.getIrodsAccount() != null) {
                idrop.getiDropCore().closeIRODSConnection(
                        idrop.getiDropCore().getIrodsAccount());
            }
            this.dispose();
        }
    }// GEN-LAST:event_btnUpdatePasswordActionPerformed

    private void setUpPasswordPanel() {
        IRODSAccount account = irodsAccount;
        lblHost.setText(account.getHost());
        lblPort.setText(String.valueOf(account.getPort()));
        lblZone.setText(account.getZone());
        lblResource.setText(account.getZone());
        lblUserName.setText(account.getUserName());
        initializePasswordColors();
    }

    private void initializePasswordColors() {
        passwdNewPassword.setBackground(Color.white);
        passwdConfirmPassword.setBackground(Color.white);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnUpdatePassword;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblConfirmPassword;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblHostLabel;
    private javax.swing.JLabel lblNewPassword;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblPortLabel;
    private javax.swing.JLabel lblResource;
    private javax.swing.JLabel lblResourceLabel;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblUserNameLabel;
    private javax.swing.JLabel lblZone;
    private javax.swing.JLabel lblZoneLabel;
    private javax.swing.JPasswordField passwdConfirmPassword;
    private javax.swing.JPasswordField passwdNewPassword;
    private javax.swing.JPanel pnlCurrentGrid;
    private javax.swing.JPanel pnlPasswordButtons;
    private javax.swing.JPanel pnlPasswords;
    // End of variables declaration//GEN-END:variables
}
