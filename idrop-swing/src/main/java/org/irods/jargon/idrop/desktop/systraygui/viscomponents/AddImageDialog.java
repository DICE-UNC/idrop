/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui.viscomponents;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import org.irods.jargon.conveyor.core.ConveyorExecutionException;
import org.irods.jargon.conveyor.core.QueueManagerService;
import org.irods.jargon.core.exception.JargonException;
import org.irods.jargon.core.pub.CollectionAO;
import org.irods.jargon.core.pub.domain.AvuData;
import org.irods.jargon.core.pub.io.IRODSFile;
import org.irods.jargon.core.pub.io.IRODSFileFactory;
import org.irods.jargon.core.query.AVUQueryElement;
import org.irods.jargon.core.query.AVUQueryElement.AVUQueryPart;
import org.irods.jargon.core.query.AVUQueryOperatorEnum;
import org.irods.jargon.core.query.JargonQueryException;
import org.irods.jargon.core.query.MetaDataAndDomainData;
import org.irods.jargon.core.utils.MiscIRODSUtils;
import org.irods.jargon.idrop.desktop.systraygui.ExperimentDialog;
import org.irods.jargon.idrop.desktop.systraygui.MessageManager;
import org.irods.jargon.idrop.desktop.systraygui.ToolsDialog;
import static org.irods.jargon.idrop.desktop.systraygui.UploadDialog.log;
import org.irods.jargon.idrop.desktop.systraygui.iDrop;
import static org.irods.jargon.idrop.desktop.systraygui.viscomponents.AddExperimentDialog.log;
import static org.irods.jargon.idrop.desktop.systraygui.viscomponents.AddSampleDialog.log;
import org.irods.jargon.idrop.finder.IRODSFinderDialog;
import org.irods.jargon.transfer.dao.domain.TransferType;
import org.openide.util.Exceptions;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mconway
 */
public class AddImageDialog extends javax.swing.JDialog {

    iDrop idropGUI;
    String samplePrepDir;
    String sampleId;
    String channel1File = "";
    String channel2File = "";
    String channel3File = "";
    String channel4File = "";

    public static org.slf4j.Logger log = LoggerFactory
            .getLogger(AddImageDialog.class);

    /**
     * Creates new form AddExperimentDialog
     */
    public AddImageDialog(ExperimentDialog parent, boolean modal, iDrop idropGUI) {
        super(parent, modal);
        this.idropGUI = idropGUI;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlSelectParentDir = new javax.swing.JPanel();
        btnBrowseForDirectory = new javax.swing.JButton();
        txtParentDirectory = new javax.swing.JTextField();
        lblPrompt = new javax.swing.JLabel();
        scrollMetadata = new javax.swing.JScrollPane();
        pnlMetadata = new javax.swing.JPanel();
        lblImageId = new javax.swing.JLabel();
        txtImageId = new javax.swing.JTextField();
        lblMicroscopeUsed = new javax.swing.JLabel();
        txtMicroscopeUsed = new javax.swing.JTextField();
        lblResolution = new javax.swing.JLabel();
        txtResolution = new javax.swing.JTextField();
        lblNotes = new javax.swing.JLabel();
        scrollNotes = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextArea();
        lblAcquisitionDate = new javax.swing.JLabel();
        txtAcquisitionDate = new javax.swing.JFormattedTextField();
        pnlCh1 = new javax.swing.JPanel();
        btnChannel1 = new javax.swing.JButton();
        txtChannel1 = new javax.swing.JTextField();
        lblPrimaryAntibodyUsedC1 = new javax.swing.JLabel();
        scrollPrimaryAntibodyC1 = new javax.swing.JScrollPane();
        txtAreaPrimaryAntibodyUsedC1 = new javax.swing.JTextArea();
        lblSecondaryAntibodyUsedC1 = new javax.swing.JLabel();
        scrollSecondaryAntibodyC1 = new javax.swing.JScrollPane();
        txtAreaSecondaryAntibodyUsedC1 = new javax.swing.JTextArea();
        lblEmWave1 = new javax.swing.JLabel();
        txtEmWave1 = new javax.swing.JTextField();
        pnlCh2 = new javax.swing.JPanel();
        btnChannel2 = new javax.swing.JButton();
        txtChannel2 = new javax.swing.JTextField();
        lblPrimaryAntibodyUsedC2 = new javax.swing.JLabel();
        scrollPrimaryAntibodyC2 = new javax.swing.JScrollPane();
        txtAreaPrimaryAntibodyUsedC2 = new javax.swing.JTextArea();
        lblSecondaryAntibodyUsedC2 = new javax.swing.JLabel();
        scrollSecondaryAntibodyC2 = new javax.swing.JScrollPane();
        txtAreaSecondaryAntibodyUsedC2 = new javax.swing.JTextArea();
        lblEmWave2 = new javax.swing.JLabel();
        txtEmWave2 = new javax.swing.JTextField();
        pnlCh3 = new javax.swing.JPanel();
        btnChannel3 = new javax.swing.JButton();
        txtChannel3 = new javax.swing.JTextField();
        lblPrimaryAntibodyUsedC3 = new javax.swing.JLabel();
        scrollPrimaryAntibodyC3 = new javax.swing.JScrollPane();
        txtAreaPrimaryAntibodyUsedC3 = new javax.swing.JTextArea();
        lblSecondaryAntibodyUsedC3 = new javax.swing.JLabel();
        scrollSecondaryAntibodyC3 = new javax.swing.JScrollPane();
        txtAreaSecondaryAntibodyUsedC3 = new javax.swing.JTextArea();
        lblEmWave3 = new javax.swing.JLabel();
        txtEmWave3 = new javax.swing.JTextField();
        pnlCh4 = new javax.swing.JPanel();
        btnChannel4 = new javax.swing.JButton();
        txtChannel4 = new javax.swing.JTextField();
        lblPrimaryAntibodyUsedC4 = new javax.swing.JLabel();
        scrollPrimaryAntibodyC4 = new javax.swing.JScrollPane();
        txtAreaPrimaryAntibodyUsedC4 = new javax.swing.JTextArea();
        lblSecondaryAntibodyUsedC4 = new javax.swing.JLabel();
        scrollSecondaryAntibodyC4 = new javax.swing.JScrollPane();
        txtAreaSecondaryAntibodyUsedC4 = new javax.swing.JTextArea();
        lblEmWave4 = new javax.swing.JLabel();
        txtEmWave4 = new javax.swing.JTextField();
        pnlBottom = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        bntSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlSelectParentDir.setLayout(new java.awt.GridBagLayout());

        btnBrowseForDirectory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_148_folder_flag.png"))); // NOI18N
        btnBrowseForDirectory.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnBrowseForDirectory.text")); // NOI18N
        btnBrowseForDirectory.setToolTipText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnBrowseForDirectory.toolTipText")); // NOI18N
        btnBrowseForDirectory.setName("btnBrowseForDirectory"); // NOI18N
        btnBrowseForDirectory.setPreferredSize(new java.awt.Dimension(110, 37));
        btnBrowseForDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseForDirectoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        pnlSelectParentDir.add(btnBrowseForDirectory, gridBagConstraints);

        txtParentDirectory.setColumns(30);
        txtParentDirectory.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtParentDirectory.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        pnlSelectParentDir.add(txtParentDirectory, gridBagConstraints);

        lblPrompt.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblPrompt.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        pnlSelectParentDir.add(lblPrompt, gridBagConstraints);

        getContentPane().add(pnlSelectParentDir, java.awt.BorderLayout.NORTH);

        pnlMetadata.setLayout(new java.awt.GridBagLayout());

        lblImageId.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblImageId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblImageId, gridBagConstraints);
        lblImageId.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblImageId.AccessibleContext.accessibleName")); // NOI18N

        txtImageId.setColumns(20);
        txtImageId.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtImageId.text")); // NOI18N
        txtImageId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImageIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtImageId, gridBagConstraints);

        lblMicroscopeUsed.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblMicroscopeUsed.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblMicroscopeUsed, gridBagConstraints);

        txtMicroscopeUsed.setColumns(20);
        txtMicroscopeUsed.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtMicroscopeUsed.text")); // NOI18N
        txtMicroscopeUsed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMicroscopeUsedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtMicroscopeUsed, gridBagConstraints);

        lblResolution.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblResolution.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblResolution, gridBagConstraints);

        txtResolution.setColumns(20);
        txtResolution.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtResolution.text")); // NOI18N
        txtResolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResolutionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtResolution, gridBagConstraints);

        lblNotes.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblNotes.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblNotes, gridBagConstraints);

        txtNotes.setColumns(30);
        txtNotes.setRows(5);
        scrollNotes.setViewportView(txtNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(scrollNotes, gridBagConstraints);

        lblAcquisitionDate.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblAcquisitionDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblAcquisitionDate, gridBagConstraints);

        txtAcquisitionDate.setColumns(12);
        txtAcquisitionDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtAcquisitionDate.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtAcquisitionDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtAcquisitionDate, gridBagConstraints);

        pnlCh1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.pnlCh1.border.title"))); // NOI18N
        pnlCh1.setLayout(new java.awt.GridBagLayout());

        btnChannel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_148_folder_flag.png"))); // NOI18N
        btnChannel1.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel1.text")); // NOI18N
        btnChannel1.setToolTipText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel1.toolTipText")); // NOI18N
        btnChannel1.setMaximumSize(null);
        btnChannel1.setMinimumSize(null);
        btnChannel1.setName("btnBrowseForDirectory"); // NOI18N
        btnChannel1.setPreferredSize(null);
        btnChannel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannel1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        pnlCh1.add(btnChannel1, gridBagConstraints);

        txtChannel1.setColumns(30);
        txtChannel1.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtChannel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        pnlCh1.add(txtChannel1, gridBagConstraints);

        lblPrimaryAntibodyUsedC1.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblPrimaryAntibodyUsedC1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh1.add(lblPrimaryAntibodyUsedC1, gridBagConstraints);

        txtAreaPrimaryAntibodyUsedC1.setColumns(20);
        txtAreaPrimaryAntibodyUsedC1.setRows(3);
        scrollPrimaryAntibodyC1.setViewportView(txtAreaPrimaryAntibodyUsedC1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh1.add(scrollPrimaryAntibodyC1, gridBagConstraints);

        lblSecondaryAntibodyUsedC1.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblSecondaryAntibodyUsedC1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh1.add(lblSecondaryAntibodyUsedC1, gridBagConstraints);

        txtAreaSecondaryAntibodyUsedC1.setColumns(20);
        txtAreaSecondaryAntibodyUsedC1.setRows(3);
        scrollSecondaryAntibodyC1.setViewportView(txtAreaSecondaryAntibodyUsedC1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh1.add(scrollSecondaryAntibodyC1, gridBagConstraints);

        lblEmWave1.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblEmWave1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        pnlCh1.add(lblEmWave1, gridBagConstraints);

        txtEmWave1.setColumns(19);
        txtEmWave1.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtEmWave1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh1.add(txtEmWave1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        pnlMetadata.add(pnlCh1, gridBagConstraints);

        pnlCh2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.pnlCh2.border.title"))); // NOI18N
        pnlCh2.setLayout(new java.awt.GridBagLayout());

        btnChannel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_148_folder_flag.png"))); // NOI18N
        btnChannel2.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel2.text")); // NOI18N
        btnChannel2.setToolTipText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel2.toolTipText")); // NOI18N
        btnChannel2.setActionCommand(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel2.actionCommand")); // NOI18N
        btnChannel2.setMaximumSize(null);
        btnChannel2.setMinimumSize(null);
        btnChannel2.setName("btnBrowseForDirectory"); // NOI18N
        btnChannel2.setPreferredSize(null);
        btnChannel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannel2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        pnlCh2.add(btnChannel2, gridBagConstraints);

        txtChannel2.setColumns(30);
        txtChannel2.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtChannel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        pnlCh2.add(txtChannel2, gridBagConstraints);

        lblPrimaryAntibodyUsedC2.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblPrimaryAntibodyUsedC2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh2.add(lblPrimaryAntibodyUsedC2, gridBagConstraints);

        txtAreaPrimaryAntibodyUsedC2.setColumns(20);
        txtAreaPrimaryAntibodyUsedC2.setRows(3);
        scrollPrimaryAntibodyC2.setViewportView(txtAreaPrimaryAntibodyUsedC2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh2.add(scrollPrimaryAntibodyC2, gridBagConstraints);

        lblSecondaryAntibodyUsedC2.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblSecondaryAntibodyUsedC2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh2.add(lblSecondaryAntibodyUsedC2, gridBagConstraints);

        txtAreaSecondaryAntibodyUsedC2.setColumns(20);
        txtAreaSecondaryAntibodyUsedC2.setRows(3);
        scrollSecondaryAntibodyC2.setViewportView(txtAreaSecondaryAntibodyUsedC2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh2.add(scrollSecondaryAntibodyC2, gridBagConstraints);

        lblEmWave2.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblEmWave2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        pnlCh2.add(lblEmWave2, gridBagConstraints);

        txtEmWave2.setColumns(19);
        txtEmWave2.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtEmWave2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh2.add(txtEmWave2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        pnlMetadata.add(pnlCh2, gridBagConstraints);

        pnlCh3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.pnlCh3.border.title"))); // NOI18N
        pnlCh3.setLayout(new java.awt.GridBagLayout());

        btnChannel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_148_folder_flag.png"))); // NOI18N
        btnChannel3.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel3.text")); // NOI18N
        btnChannel3.setToolTipText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel3.toolTipText")); // NOI18N
        btnChannel3.setMaximumSize(null);
        btnChannel3.setMinimumSize(null);
        btnChannel3.setName("btnBrowseForDirectory"); // NOI18N
        btnChannel3.setPreferredSize(null);
        btnChannel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannel3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        pnlCh3.add(btnChannel3, gridBagConstraints);

        txtChannel3.setColumns(30);
        txtChannel3.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtChannel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        pnlCh3.add(txtChannel3, gridBagConstraints);

        lblPrimaryAntibodyUsedC3.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblPrimaryAntibodyUsedC3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh3.add(lblPrimaryAntibodyUsedC3, gridBagConstraints);

        txtAreaPrimaryAntibodyUsedC3.setColumns(20);
        txtAreaPrimaryAntibodyUsedC3.setRows(3);
        scrollPrimaryAntibodyC3.setViewportView(txtAreaPrimaryAntibodyUsedC3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh3.add(scrollPrimaryAntibodyC3, gridBagConstraints);

        lblSecondaryAntibodyUsedC3.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblSecondaryAntibodyUsedC3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh3.add(lblSecondaryAntibodyUsedC3, gridBagConstraints);

        txtAreaSecondaryAntibodyUsedC3.setColumns(20);
        txtAreaSecondaryAntibodyUsedC3.setRows(3);
        scrollSecondaryAntibodyC3.setViewportView(txtAreaSecondaryAntibodyUsedC3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh3.add(scrollSecondaryAntibodyC3, gridBagConstraints);

        lblEmWave3.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblEmWave3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        pnlCh3.add(lblEmWave3, gridBagConstraints);

        txtEmWave3.setColumns(19);
        txtEmWave3.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtEmWave3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh3.add(txtEmWave3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        pnlMetadata.add(pnlCh3, gridBagConstraints);

        pnlCh4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.pnlCh4.border.title"))); // NOI18N
        pnlCh4.setLayout(new java.awt.GridBagLayout());

        btnChannel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_148_folder_flag.png"))); // NOI18N
        btnChannel4.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel4.text")); // NOI18N
        btnChannel4.setToolTipText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnChannel4.toolTipText")); // NOI18N
        btnChannel4.setMaximumSize(null);
        btnChannel4.setMinimumSize(null);
        btnChannel4.setName("btnBrowseForDirectory"); // NOI18N
        btnChannel4.setPreferredSize(null);
        btnChannel4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannel4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        pnlCh4.add(btnChannel4, gridBagConstraints);

        txtChannel4.setColumns(30);
        txtChannel4.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtChannel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        pnlCh4.add(txtChannel4, gridBagConstraints);

        lblPrimaryAntibodyUsedC4.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblPrimaryAntibodyUsedC4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh4.add(lblPrimaryAntibodyUsedC4, gridBagConstraints);

        txtAreaPrimaryAntibodyUsedC4.setColumns(20);
        txtAreaPrimaryAntibodyUsedC4.setRows(3);
        scrollPrimaryAntibodyC4.setViewportView(txtAreaPrimaryAntibodyUsedC4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh4.add(scrollPrimaryAntibodyC4, gridBagConstraints);

        lblSecondaryAntibodyUsedC4.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblSecondaryAntibodyUsedC4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlCh4.add(lblSecondaryAntibodyUsedC4, gridBagConstraints);

        txtAreaSecondaryAntibodyUsedC4.setColumns(20);
        txtAreaSecondaryAntibodyUsedC4.setRows(3);
        scrollSecondaryAntibodyC4.setViewportView(txtAreaSecondaryAntibodyUsedC4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh4.add(scrollSecondaryAntibodyC4, gridBagConstraints);

        lblEmWave4.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.lblEmWave4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        pnlCh4.add(lblEmWave4, gridBagConstraints);

        txtEmWave4.setColumns(19);
        txtEmWave4.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.txtEmWave4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlCh4.add(txtEmWave4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        pnlMetadata.add(pnlCh4, gridBagConstraints);

        scrollMetadata.setViewportView(pnlMetadata);

        getContentPane().add(scrollMetadata, java.awt.BorderLayout.CENTER);

        pnlBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_197_remove.png"))); // NOI18N
        btnCancel.setMnemonic('c');
        btnCancel.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnCancel.text")); // NOI18N
        btnCancel.setToolTipText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.btnCancel.toolTipText")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.setPreferredSize(new java.awt.Dimension(110, 37));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlBottom.add(btnCancel);

        bntSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_193_circle_ok.png"))); // NOI18N
        bntSave.setMnemonic('O');
        bntSave.setText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.bntSave.text")); // NOI18N
        bntSave.setToolTipText(org.openide.util.NbBundle.getMessage(AddImageDialog.class, "AddImageDialog.bntSave.toolTipText")); // NOI18N
        bntSave.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bntSave.setMaximumSize(null);
        bntSave.setMinimumSize(null);
        bntSave.setName("btnExit"); // NOI18N
        bntSave.setPreferredSize(new java.awt.Dimension(90, 37));
        bntSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSaveActionPerformed(evt);
            }
        });
        pnlBottom.add(bntSave);

        getContentPane().add(pnlBottom, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseForDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseForDirectoryActionPerformed

        IRODSFinderDialog irodsFinderDialog = new IRODSFinderDialog(idropGUI, true, idropGUI.getiDropCore(), idropGUI.getIrodsAccount());
        irodsFinderDialog.setVisible(true);
        samplePrepDir = irodsFinderDialog.getSelectedAbsolutePath();

        if (samplePrepDir != null) {
            try {
                //txtParentDirectory.setText(MiscIRODSUtils.abbreviateFileName(samplePrepDir));
                txtParentDirectory.setText(samplePrepDir);
                CollectionAO collectionAO = idropGUI.getiDropCore().getIRODSAccessObjectFactory().getCollectionAO(idropGUI.getIrodsAccount());
                List<AVUQueryElement> query = new ArrayList<AVUQueryElement>();
                query.add(AVUQueryElement.instanceForValueQuery(AVUQueryPart.ATTRIBUTE, AVUQueryOperatorEnum.EQUAL, "SampleId"));
                List<MetaDataAndDomainData> result = collectionAO.findMetadataValuesByMetadataQueryForCollection(query, samplePrepDir);
                if (result.isEmpty()) {
                    log.warn("no sample for:{}", txtParentDirectory);
                    MessageManager.showWarning(this, "selected collection is not an sample preparation");
                }

                sampleId = result.get(0).getAvuValue();
                lblPrompt.setText("image is associated with sample preperation:" + sampleId);

            } catch (JargonException ex) {
                log.error("exception finding sample ", ex);
                MessageManager.showError(this, ex.getMessage());
            } catch (JargonQueryException ex) {
                log.error("exception finding sample", ex);
                MessageManager.showError(this, ex.getMessage());
            }

        }
    }//GEN-LAST:event_btnBrowseForDirectoryActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed

        dispose();

    }//GEN-LAST:event_btnCancelActionPerformed

    private void bntSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSaveActionPerformed
        try {
            IRODSFileFactory irodsFileFactory = idropGUI.getiDropCore().getIRODSFileFactoryForLoggedInAccount();
            IRODSFile parentFile = irodsFileFactory.instanceIRODSFile(samplePrepDir);
            IRODSFile imageFile = irodsFileFactory.instanceIRODSFile(parentFile.getAbsolutePath(), txtImageId.getText());
            imageFile.mkdirs();

            if (txtImageId.getText() == null) {
                MessageManager.showError(this, "no image id provided");
                return;
            }

            CollectionAO collectionAO = idropGUI.getiDropCore().getIRODSAccessObjectFactory().getCollectionAO(idropGUI.getIrodsAccount());
            AvuData data = new AvuData("ImageId", txtImageId.getText(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(imageFile.getAbsolutePath(), data);

            data = new AvuData("SampleId", sampleId, "ipc-reserved-unit");
            collectionAO.addAVUMetadata(imageFile.getAbsolutePath(), data);

            if (!txtMicroscopeUsed.getText().isEmpty()) {
                data = new AvuData("Microscope Used", txtMicroscopeUsed.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(imageFile.getAbsolutePath(), data);
            }

            if (!txtAcquisitionDate.getText().isEmpty()) {
                data = new AvuData("Aquisition Date", txtAcquisitionDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(imageFile.getAbsolutePath(), data);
            }

            if (!txtResolution.getText().isEmpty()) {
                data = new AvuData("Resolution", txtResolution.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(imageFile.getAbsolutePath(), data);
            }

            if (!txtNotes.getText().isEmpty()) {

                data = new AvuData("Notes", txtNotes.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(imageFile.getAbsolutePath(), data);
            }

            if (!txtChannel1.getText().isEmpty()) {
                IRODSFile channel1File = irodsFileFactory.instanceIRODSFile(imageFile.getAbsolutePath(), "Channel1");
                channel1File.mkdirs();
                data = new AvuData("Channel1 File", txtChannel1.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(channel1File.getAbsolutePath(), data);
                if (!txtEmWave1.getText().isEmpty()) {
                    data = new AvuData("Channel1 Emission Wavelength", txtEmWave1.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel1File.getAbsolutePath(), data);
                }
                if (!txtAreaPrimaryAntibodyUsedC1.getText().isEmpty()) {
                    data = new AvuData("Channel1 Primary Antibody", txtAreaPrimaryAntibodyUsedC1.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel1File.getAbsolutePath(), data);
                }
                if (!txtAreaSecondaryAntibodyUsedC1.getText().isEmpty()) {
                    data = new AvuData("Channel1 Secondary Antibody", txtAreaSecondaryAntibodyUsedC1.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel1File.getAbsolutePath(), data);
                }

                initiateTransfer(channel1File.getAbsolutePath(), txtChannel1.getText());

            }

            if (!txtChannel2.getText().isEmpty()) {
                IRODSFile channel2File = irodsFileFactory.instanceIRODSFile(imageFile.getAbsolutePath(), "Channel2");
                channel2File.mkdirs();
                data = new AvuData("Channel2 File", txtChannel2.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(channel2File.getAbsolutePath(), data);
                if (!txtEmWave2.getText().isEmpty()) {
                    data = new AvuData("Channel2 Emission Wavelength", txtEmWave2.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel2File.getAbsolutePath(), data);
                }
                if (!txtAreaPrimaryAntibodyUsedC2.getText().isEmpty()) {
                    data = new AvuData("Channel2 Primary Antibody", txtAreaPrimaryAntibodyUsedC2.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel2File.getAbsolutePath(), data);
                }
                if (!txtAreaSecondaryAntibodyUsedC2.getText().isEmpty()) {
                    data = new AvuData("Channel2 Secondary Antibody", txtAreaSecondaryAntibodyUsedC2.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel2File.getAbsolutePath(), data);
                }

                initiateTransfer(channel2File.getAbsolutePath(), txtChannel2.getText());
            }

            if (!txtChannel3.getText().isEmpty()) {
                IRODSFile channel3File = irodsFileFactory.instanceIRODSFile(imageFile.getAbsolutePath(), "Channel3");
                channel3File.mkdirs();
                data = new AvuData("Channel3 File", txtChannel3.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(channel3File.getAbsolutePath(), data);
                if (!txtEmWave3.getText().isEmpty()) {
                    data = new AvuData("Channel3 Emission Wavelength", txtEmWave3.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel3File.getAbsolutePath(), data);
                }
                if (!txtAreaPrimaryAntibodyUsedC3.getText().isEmpty()) {
                    data = new AvuData("Channel3 Primary Antibody", txtAreaPrimaryAntibodyUsedC3.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel3File.getAbsolutePath(), data);
                }
                if (!txtAreaSecondaryAntibodyUsedC3.getText().isEmpty()) {
                    data = new AvuData("Channel3 Secondary Antibody", txtAreaSecondaryAntibodyUsedC3.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel3File.getAbsolutePath(), data);
                }

                initiateTransfer(channel3File.getAbsolutePath(), txtChannel3.getText());
            }

            if (!txtChannel4.getText().isEmpty()) {
                IRODSFile channel4File = irodsFileFactory.instanceIRODSFile(imageFile.getAbsolutePath(), "Channel4");
                channel4File.mkdirs();
                data = new AvuData("Channel4 File", txtChannel4.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(channel4File.getAbsolutePath(), data);
                if (!txtEmWave4.getText().isEmpty()) {
                    data = new AvuData("Channel4 Emission Wavelength", txtEmWave4.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel4File.getAbsolutePath(), data);
                }
                if (!txtAreaPrimaryAntibodyUsedC4.getText().isEmpty()) {
                    data = new AvuData("Channel4 Primary Antibody", txtAreaPrimaryAntibodyUsedC4.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel4File.getAbsolutePath(), data);
                }
                if (!txtAreaSecondaryAntibodyUsedC4.getText().isEmpty()) {
                    data = new AvuData("Channel4 Secondary Antibody", txtAreaSecondaryAntibodyUsedC4.getText(), "ipc-reserved-unit");
                    collectionAO.addAVUMetadata(channel4File.getAbsolutePath(), data);
                }
                initiateTransfer(channel4File.getAbsolutePath(), txtChannel4.getText());
            }

        } catch (JargonException je) {
            log.error("error creating experiment", je);
            MessageManager.showError(this, je.getMessage());
        } finally {
            idropGUI.getiDropCore().closeAllIRODSConnections();
        }
        idropGUI.callReloadTree();

        dispose();
    }//GEN-LAST:event_bntSaveActionPerformed

    private void initiateTransfer(String target, String sourceAbsolutePath) {
        log.info("process a put from source: {}", sourceAbsolutePath);

        idropGUI.getIrodsAccount().getDefaultStorageResource();
        log.info("initiating put transfer");

        try {
            QueueManagerService qms = idropGUI.getiDropCore()
                    .getConveyorService().getQueueManagerService();
            qms.enqueueTransferOperation(target, sourceAbsolutePath,
                    idropGUI.getiDropCore().irodsAccount(),
                    TransferType.PUT);
        } catch (ConveyorExecutionException ex) {
            java.util.logging.Logger.getLogger(
                    LocalFileTree.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
            idropGUI.showIdropException(ex);
        }
    }

    private void txtResolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResolutionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResolutionActionPerformed

    private void txtMicroscopeUsedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMicroscopeUsedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMicroscopeUsedActionPerformed

    private void txtImageIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImageIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImageIdActionPerformed

    private void btnChannel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannel1ActionPerformed
        JFileChooser localFileChooser = new JFileChooser();
        localFileChooser.setMultiSelectionEnabled(false);
        localFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        localFileChooser.setDialogTitle("Select Channel 1 file");
        localFileChooser.setLocation((int) this.getLocation().getX(),
                (int) this.getLocation().getY());
        int returnVal = localFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String downloadPath = localFileChooser.getSelectedFile()
                    .getAbsolutePath();
            txtChannel1.setText(MiscIRODSUtils.abbreviateFileName(downloadPath));
            txtChannel1.setToolTipText(downloadPath);
            this.channel1File = downloadPath;
        }
    }//GEN-LAST:event_btnChannel1ActionPerformed

    private void btnChannel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannel2ActionPerformed
        JFileChooser localFileChooser = new JFileChooser();
        localFileChooser.setMultiSelectionEnabled(false);
        localFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        localFileChooser.setDialogTitle("Select Channel 2 file");
        localFileChooser.setLocation((int) this.getLocation().getX(),
                (int) this.getLocation().getY());
        int returnVal = localFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String downloadPath = localFileChooser.getSelectedFile()
                    .getAbsolutePath();
            txtChannel2.setText(MiscIRODSUtils.abbreviateFileName(downloadPath));
            txtChannel2.setToolTipText(downloadPath);
            this.channel2File = downloadPath;
        }
    }//GEN-LAST:event_btnChannel2ActionPerformed

    private void btnChannel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannel3ActionPerformed
         JFileChooser localFileChooser = new JFileChooser();
        localFileChooser.setMultiSelectionEnabled(false);
        localFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        localFileChooser.setDialogTitle("Select Channel 3 file");
        localFileChooser.setLocation((int) this.getLocation().getX(),
                (int) this.getLocation().getY());
        int returnVal = localFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String downloadPath = localFileChooser.getSelectedFile()
                    .getAbsolutePath();
            txtChannel3.setText(MiscIRODSUtils.abbreviateFileName(downloadPath));
            txtChannel3.setToolTipText(downloadPath);
            this.channel3File = downloadPath;
        }
    }//GEN-LAST:event_btnChannel3ActionPerformed

    private void btnChannel4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannel4ActionPerformed
        JFileChooser localFileChooser = new JFileChooser();
        localFileChooser.setMultiSelectionEnabled(false);
        localFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        localFileChooser.setDialogTitle("Select Channel 4 file");
        localFileChooser.setLocation((int) this.getLocation().getX(),
                (int) this.getLocation().getY());
        int returnVal = localFileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String downloadPath = localFileChooser.getSelectedFile()
                    .getAbsolutePath();
            txtChannel4.setText(MiscIRODSUtils.abbreviateFileName(downloadPath));
            txtChannel4.setToolTipText(downloadPath);
            this.channel4File = downloadPath;
        }
    }//GEN-LAST:event_btnChannel4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntSave;
    private javax.swing.JButton btnBrowseForDirectory;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChannel1;
    private javax.swing.JButton btnChannel2;
    private javax.swing.JButton btnChannel3;
    private javax.swing.JButton btnChannel4;
    private javax.swing.JLabel lblAcquisitionDate;
    private javax.swing.JLabel lblEmWave1;
    private javax.swing.JLabel lblEmWave2;
    private javax.swing.JLabel lblEmWave3;
    private javax.swing.JLabel lblEmWave4;
    private javax.swing.JLabel lblImageId;
    private javax.swing.JLabel lblMicroscopeUsed;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblPrimaryAntibodyUsedC1;
    private javax.swing.JLabel lblPrimaryAntibodyUsedC2;
    private javax.swing.JLabel lblPrimaryAntibodyUsedC3;
    private javax.swing.JLabel lblPrimaryAntibodyUsedC4;
    private javax.swing.JLabel lblPrompt;
    private javax.swing.JLabel lblResolution;
    private javax.swing.JLabel lblSecondaryAntibodyUsedC1;
    private javax.swing.JLabel lblSecondaryAntibodyUsedC2;
    private javax.swing.JLabel lblSecondaryAntibodyUsedC3;
    private javax.swing.JLabel lblSecondaryAntibodyUsedC4;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlCh1;
    private javax.swing.JPanel pnlCh2;
    private javax.swing.JPanel pnlCh3;
    private javax.swing.JPanel pnlCh4;
    private javax.swing.JPanel pnlMetadata;
    private javax.swing.JPanel pnlSelectParentDir;
    private javax.swing.JScrollPane scrollMetadata;
    private javax.swing.JScrollPane scrollNotes;
    private javax.swing.JScrollPane scrollPrimaryAntibodyC1;
    private javax.swing.JScrollPane scrollPrimaryAntibodyC2;
    private javax.swing.JScrollPane scrollPrimaryAntibodyC3;
    private javax.swing.JScrollPane scrollPrimaryAntibodyC4;
    private javax.swing.JScrollPane scrollSecondaryAntibodyC1;
    private javax.swing.JScrollPane scrollSecondaryAntibodyC2;
    private javax.swing.JScrollPane scrollSecondaryAntibodyC3;
    private javax.swing.JScrollPane scrollSecondaryAntibodyC4;
    private javax.swing.JFormattedTextField txtAcquisitionDate;
    private javax.swing.JTextArea txtAreaPrimaryAntibodyUsedC1;
    private javax.swing.JTextArea txtAreaPrimaryAntibodyUsedC2;
    private javax.swing.JTextArea txtAreaPrimaryAntibodyUsedC3;
    private javax.swing.JTextArea txtAreaPrimaryAntibodyUsedC4;
    private javax.swing.JTextArea txtAreaSecondaryAntibodyUsedC1;
    private javax.swing.JTextArea txtAreaSecondaryAntibodyUsedC2;
    private javax.swing.JTextArea txtAreaSecondaryAntibodyUsedC3;
    private javax.swing.JTextArea txtAreaSecondaryAntibodyUsedC4;
    private javax.swing.JTextField txtChannel1;
    private javax.swing.JTextField txtChannel2;
    private javax.swing.JTextField txtChannel3;
    private javax.swing.JTextField txtChannel4;
    private javax.swing.JTextField txtEmWave1;
    private javax.swing.JTextField txtEmWave2;
    private javax.swing.JTextField txtEmWave3;
    private javax.swing.JTextField txtEmWave4;
    private javax.swing.JTextField txtImageId;
    private javax.swing.JTextField txtMicroscopeUsed;
    private javax.swing.JTextArea txtNotes;
    private javax.swing.JTextField txtParentDirectory;
    private javax.swing.JTextField txtResolution;
    // End of variables declaration//GEN-END:variables
}
