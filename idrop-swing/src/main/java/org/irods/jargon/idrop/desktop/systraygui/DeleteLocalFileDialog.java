/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeleteIRODSDialog.java
 *
 * Created on Sep 4, 2010, 7:40:23 AM
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.tree.TreePath;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.LocalFileNode;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.LocalFileSystemModel;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.LocalFileTree;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mikeconway
 */
public class DeleteLocalFileDialog extends javax.swing.JDialog {

    private final iDrop idrop;
    private String directoryToDelete = "";
    private final LocalFileTree localFileTree;
    private final LocalFileNode deletedNode;
    public static org.slf4j.Logger log = LoggerFactory.getLogger(DeleteLocalFileDialog.class);

    /** Creates new form to delete a local file */
    public DeleteLocalFileDialog(final iDrop parent, final boolean modal, final String directoryToDelete, final LocalFileTree localFileTree, final LocalFileNode deletedNode) {
        super(parent, modal);
        this.idrop = parent;
        this.directoryToDelete = directoryToDelete;
        this.localFileTree = localFileTree;
        this.deletedNode = deletedNode;
        initComponents();
        txtAreaFileToDelete.setText(this.directoryToDelete);
        registerKeystrokeListener();

    }

    private void recursiveDelete(File fileToDelete) throws IOException {
        if (fileToDelete.isDirectory()) {
            for (File c : fileToDelete.listFiles()) {
                recursiveDelete(c);
            }
        }
        if (!fileToDelete.delete()) {
            throw new FileNotFoundException("Failed to delete file: " + fileToDelete);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        pnlFolderData = new javax.swing.JPanel();
        pnlCurrentParent = new javax.swing.JPanel();
        lblCurrentFolder = new java.awt.Label();
        scrollFileToDelete = new javax.swing.JScrollPane();
        txtAreaFileToDelete = new javax.swing.JTextArea();
        pnlBottom = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("iDrop - Delete local file or folder");

        lblTitle.setText("Please hit OK to delete the following file/folder from the local file syste");
        getContentPane().add(lblTitle, java.awt.BorderLayout.NORTH);

        pnlFolderData.setLayout(new java.awt.GridLayout(0, 1));

        lblCurrentFolder.setText("File/folder to delete:");

        txtAreaFileToDelete.setColumns(20);
        txtAreaFileToDelete.setEditable(false);
        txtAreaFileToDelete.setLineWrap(true);
        txtAreaFileToDelete.setRows(5);
        scrollFileToDelete.setViewportView(txtAreaFileToDelete);

        org.jdesktop.layout.GroupLayout pnlCurrentParentLayout = new org.jdesktop.layout.GroupLayout(pnlCurrentParent);
        pnlCurrentParent.setLayout(pnlCurrentParentLayout);
        pnlCurrentParentLayout.setHorizontalGroup(
            pnlCurrentParentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlCurrentParentLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .add(lblCurrentFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollFileToDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 413, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlCurrentParentLayout.setVerticalGroup(
            pnlCurrentParentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlCurrentParentLayout.createSequentialGroup()
                .add(pnlCurrentParentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlCurrentParentLayout.createSequentialGroup()
                        .add(35, 35, 35)
                        .add(lblCurrentFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlCurrentParentLayout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(scrollFileToDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlFolderData.add(pnlCurrentParent);

        getContentPane().add(pnlFolderData, java.awt.BorderLayout.CENTER);

        pnlBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlBottom.add(btnCancel);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        pnlBottom.add(btnOK);

        getContentPane().add(pnlBottom, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
}//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        processDelete();

}//GEN-LAST:event_btnOKActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private java.awt.Label lblCurrentFolder;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlCurrentParent;
    private javax.swing.JPanel pnlFolderData;
    private javax.swing.JScrollPane scrollFileToDelete;
    private javax.swing.JTextArea txtAreaFileToDelete;
    // End of variables declaration//GEN-END:variables

    private void processDelete() {

        log.info("delete folder named:{}", txtAreaFileToDelete.getText());
        final DeleteLocalFileDialog thisDialog = this;


        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    thisDialog.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    TreePath deletedNodePath = new TreePath(deletedNode);
                    LocalFileNode parentNode = (LocalFileNode) deletedNode.getParent();
                    File fileToDelete = (File) deletedNode.getUserObject();
                    log.debug("deleting local file:{}", fileToDelete.getAbsolutePath());

                    recursiveDelete(fileToDelete);
                    LocalFileSystemModel localFileTreeModel = (LocalFileSystemModel) localFileTree.getModel();
                    localFileTreeModel.removeNodeFromParent(deletedNode);

                    idrop.showMessageFromOperation("delete successful");
                    /*  boolean deleted = fileToDelete.delete();

                    if (deleted == false) {
                    log.warn("delete unsuccessful for:{}", fileToDelete.getAbsolutePath());
                    idrop.showIdropException(new IdropException("unable to delete file:" + fileToDelete.getAbsolutePath()));

                    } else {

                    LocalFileSystemModel localFileTreeModel = (LocalFileSystemModel) localFileTree.getModel();
                    localFileTreeModel.removeNodeFromParent(deletedNode);

                    idrop.showMessageFromOperation("delete successful");
                    }
                     * */

                } catch (Exception ex) {
                    Logger.getLogger(NewIRODSDirectoryDialog.class.getName()).log(Level.SEVERE, null, ex);
                    idrop.showIdropException(ex);
                } finally {
                    thisDialog.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }

                thisDialog.dispose();
            }
        });
    }


    /**
     * Register a listener for the enter event, so login can occur.
     */
    private void registerKeystrokeListener() {

        KeyStroke enter = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0);
        Action enterAction = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                processDelete();
            }
        };
        btnOK.registerKeyboardAction(enterAction, enter,
                JComponent.WHEN_IN_FOCUSED_WINDOW);

    }


}
