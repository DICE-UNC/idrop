/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeleteIRODSDialog.java
 *
 * Created on Sep 4, 2010, 7:40:23 AM
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.tree.TreePath;

import org.irods.jargon.idrop.desktop.systraygui.viscomponents.LocalFileNode;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.LocalFileSystemModel;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.LocalFileTree;
import org.slf4j.LoggerFactory;

/**
 * 
 * @author mikeconway
 */
public class DeleteLocalFileDialog extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1982422243958895850L;
	private final iDrop idrop;
	private String directoryToDelete = "";
	private final LocalFileTree localFileTree;
	private final LocalFileNode deletedNode;
	private final List<LocalFileNode> deletedNodes;
	public static org.slf4j.Logger log = LoggerFactory
			.getLogger(DeleteLocalFileDialog.class);

	/** Creates new form to delete a local file */
	public DeleteLocalFileDialog(final iDrop parent, final boolean modal,
			final String directoryToDelete, final LocalFileTree localFileTree,
			final LocalFileNode deletedNode) {
		super(parent, modal);
		idrop = parent;
		this.directoryToDelete = directoryToDelete;
		this.localFileTree = localFileTree;
		this.deletedNode = deletedNode;
		deletedNodes = null;
		initComponents();
		txtAreaFileToDelete.setText(this.directoryToDelete);
		registerKeystrokeListener();

	}

	/** Creates new form to delete a local file */
	public DeleteLocalFileDialog(final iDrop parent, final boolean modal,
			final LocalFileTree localFileTree,
			final List<LocalFileNode> deletedNodes) {
		super(parent, modal);
		idrop = parent;
		directoryToDelete = null;
		this.localFileTree = localFileTree;
		deletedNode = null;
		this.deletedNodes = deletedNodes;
		initComponents();
		txtAreaFileToDelete.setText("Multiple selections");
		registerKeystrokeListener();

	}

	private void recursiveDelete(final File fileToDelete) throws IOException {
		if (fileToDelete.isDirectory()) {
			for (File c : fileToDelete.listFiles()) {
				recursiveDelete(c);
			}
		}
		if (!fileToDelete.delete()) {
			throw new FileNotFoundException("Failed to delete file: "
					+ fileToDelete);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		lblTitle = new javax.swing.JLabel();
		pnlFolderData = new javax.swing.JPanel();
		scrollFileToDelete = new javax.swing.JScrollPane();
		txtAreaFileToDelete = new javax.swing.JTextArea();
		pnlBottom = new javax.swing.JPanel();
		btnCancel = new javax.swing.JButton();
		btnOK = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("iDrop - Delete local file or folder");
		setPreferredSize(new java.awt.Dimension(300, 200));

		lblTitle.setText("Please hit OK to delete the following file/folder from the local file system");
		getContentPane().add(lblTitle, java.awt.BorderLayout.NORTH);

		pnlFolderData.setLayout(new java.awt.BorderLayout());

		txtAreaFileToDelete.setColumns(20);
		txtAreaFileToDelete.setEditable(false);
		txtAreaFileToDelete.setLineWrap(true);
		txtAreaFileToDelete.setRows(5);
		scrollFileToDelete.setViewportView(txtAreaFileToDelete);

		pnlFolderData.add(scrollFileToDelete, java.awt.BorderLayout.CENTER);

		getContentPane().add(pnlFolderData, java.awt.BorderLayout.CENTER);

		pnlBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

		btnCancel
				.setIcon(new javax.swing.ImageIcon(
						getClass()
								.getResource(
										"/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_192_circle_remove.png"))); // NOI18N
		btnCancel.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				btnCancelActionPerformed(evt);
			}
		});
		pnlBottom.add(btnCancel);

		btnOK.setIcon(new javax.swing.ImageIcon(
				getClass()
						.getResource(
								"/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_193_circle_ok.png"))); // NOI18N
		btnOK.setMnemonic('o');
		btnOK.setToolTipText("Proceed with delete");
		btnOK.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				btnOKActionPerformed(evt);
			}
		});
		pnlBottom.add(btnOK);

		getContentPane().add(pnlBottom, java.awt.BorderLayout.SOUTH);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCancelActionPerformed
		dispose();
	}// GEN-LAST:event_btnCancelActionPerformed

	private void btnOKActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnOKActionPerformed
		processDelete();

	}// GEN-LAST:event_btnOKActionPerformed
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JButton btnCancel;
	private javax.swing.JButton btnOK;
	private javax.swing.JLabel lblTitle;
	private javax.swing.JPanel pnlBottom;
	private javax.swing.JPanel pnlFolderData;
	private javax.swing.JScrollPane scrollFileToDelete;
	private javax.swing.JTextArea txtAreaFileToDelete;

	// End of variables declaration//GEN-END:variables
	private void processDelete() {

		log.info("delete folder named:{}", txtAreaFileToDelete.getText());
		final DeleteLocalFileDialog thisDialog = this;

		java.awt.EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				try {
					thisDialog.setCursor(Cursor
							.getPredefinedCursor(Cursor.WAIT_CURSOR));

					if (deletedNode != null) {
						log.info("delete single node:{}", deletedNode);
						deleteSingleNodeOperation(deletedNode);

					} else if (deletedNodes != null) {
						log.info("deleting multiple nodes");
						for (LocalFileNode theLocalNode : deletedNodes) {
							deleteSingleNodeOperation(theLocalNode);

						}
					}

					idrop.showMessageFromOperation("delete successful");

				} catch (Exception ex) {
					Logger.getLogger(NewIRODSDirectoryDialog.class.getName())
							.log(Level.SEVERE, null, ex);
					idrop.showIdropException(ex);
				} finally {
					thisDialog.setCursor(Cursor
							.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				}

				thisDialog.dispose();
			}

			private void deleteSingleNodeOperation(final LocalFileNode localNode)
					throws IOException {
				new TreePath(localNode);
				localNode.getParent();
				File fileToDelete = (File) localNode.getUserObject();
				log.debug("deleting local file:{}",
						fileToDelete.getAbsolutePath());

				recursiveDelete(fileToDelete);
				LocalFileSystemModel localFileTreeModel = (LocalFileSystemModel) localFileTree
						.getModel();
				localFileTreeModel.removeNodeFromParent(localNode);
			}
		});
	}

	/**
	 * Register a listener for the enter event, so login can occur.
	 */
	private void registerKeystrokeListener() {

		KeyStroke enter = KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_ENTER, 0);
		Action enterAction = new AbstractAction() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 5740774823149951406L;

			@Override
			public void actionPerformed(final ActionEvent e) {
				processDelete();
			}
		};
		btnOK.registerKeyboardAction(enterAction, enter,
				JComponent.WHEN_IN_FOCUSED_WINDOW);

	}
}
