/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.swing.JOptionPane;

import org.irods.jargon.core.connection.IRODSAccount;
import org.irods.jargon.core.exception.JargonException;
import org.irods.jargon.core.protovalues.FilePermissionEnum;
import org.irods.jargon.core.pub.CollectionAO;
import org.irods.jargon.core.pub.DataObjectAO;
import org.irods.jargon.core.pub.IRODSFileSystem;
import org.irods.jargon.core.pub.UserAO;
import org.irods.jargon.core.pub.domain.User;
import org.irods.jargon.core.pub.domain.UserFilePermission;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.PermissionsTableModel;
import org.slf4j.LoggerFactory;

/**
 *
 * @author lisa
 */
public class AddPermissionsDialog extends javax.swing.JDialog implements
        ActionListener {

    /**
     *
     */
    private static final long serialVersionUID = 764249725877953976L;
    private final IRODSFileSystem irodsFileSystem;
    private final IRODSAccount irodsAccount;
    private final boolean isCollection;
    private final String selectedObjectFullPath;
    private final PermissionsTableModel tableModel;
    private UserFilePermission permissionToAdd = null;
    public static org.slf4j.Logger log = LoggerFactory
            .getLogger(EditMetaDataDialog.class);

    /**
     * Creates new form AddPermissionsDialog
     */
    public AddPermissionsDialog(final javax.swing.JDialog parent,
            final boolean modal, final String selectedObjectFullPath,
            final boolean isCollection, final IRODSFileSystem irodsFileSystem,
            final IRODSAccount irodsAccount, final PermissionsTableModel model) {

        super(parent, modal);
        initComponents();

        this.irodsFileSystem = irodsFileSystem;
        this.irodsAccount = irodsAccount;
        this.isCollection = isCollection;
        this.selectedObjectFullPath = selectedObjectFullPath;
        tableModel = model;

        cbPermissionsPermission.addItem("READ");
        cbPermissionsPermission.addItem("WRITE");
        cbPermissionsPermission.addItem("OWN");

        List<User> users = null;
        try {
            UserAO userAO = irodsFileSystem.getIRODSAccessObjectFactory()
                    .getUserAO(irodsAccount);
            users = userAO.findAll();
            Collections.sort(users, new Comparator<User>() {
                @Override
                public int compare(final User object1, final User object2) {
                    return object1.getName().compareTo(object2.getName());
                }
            });

            for (User user : users) {
                cbPermissionsUserName.addItem(user.getNameWithZone());
            }
        } catch (JargonException ex) {
            log.error("cannot retrieve irods users list", ex);
            JOptionPane.showMessageDialog(this,
                    "Cannot retrieve list of iRODS users", "Add Permissions",
                    JOptionPane.PLAIN_MESSAGE);
        } finally {
            irodsFileSystem.closeAndEatExceptions();
        }

        cbPermissionsPermission.addActionListener(this);
        cbPermissionsUserName.addActionListener(this);

        updateAddButtonStatus();
    }

    private void updateAddButtonStatus() {
        btnPermissionsAdd
                .setEnabled((cbPermissionsUserName.getSelectedIndex() >= 0)
                        && (cbPermissionsPermission.getSelectedIndex() >= 0));
    }

    // public UserFilePermission getPermissionToAdd() {
    // return permissionToAdd;
    // }
    @Override
    public void actionPerformed(final ActionEvent ae) {
        updateAddButtonStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMain = new javax.swing.JPanel();
        pnlPermissionEdit = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cbPermissionsUserName = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        cbPermissionsPermission = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        btnPermissionsCancel = new javax.swing.JButton();
        btnPermissionsAdd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.title")); // NOI18N
        setName("addPermissionsDialog"); // NOI18N
        setPreferredSize(new java.awt.Dimension(300, 200));

        pnlMain.setLayout(new java.awt.BorderLayout());

        pnlPermissionEdit.setBorder(javax.swing.BorderFactory.createEmptyBorder(16, 8, 20, 8));
        pnlPermissionEdit.setName("lblUserName"); // NOI18N
        pnlPermissionEdit.setPreferredSize(new java.awt.Dimension(527, 200));
        pnlPermissionEdit.setLayout(new java.awt.GridBagLayout());

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.lblUserName.text")); // NOI18N
        jLabel31.setName("lblUserName"); // NOI18N
        jLabel31.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlPermissionEdit.add(jLabel31, gridBagConstraints);

        cbPermissionsUserName.setMinimumSize(null);
        cbPermissionsUserName.setName("userName"); // NOI18N
        cbPermissionsUserName.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlPermissionEdit.add(cbPermissionsUserName, gridBagConstraints);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.lblPermission.text")); // NOI18N
        jLabel32.setName("lblPermission"); // NOI18N
        jLabel32.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlPermissionEdit.add(jLabel32, gridBagConstraints);

        cbPermissionsPermission.setMinimumSize(null);
        cbPermissionsPermission.setName("permission"); // NOI18N
        cbPermissionsPermission.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlPermissionEdit.add(cbPermissionsPermission, gridBagConstraints);

        pnlMain.add(pnlPermissionEdit, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 6, 1));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnPermissionsCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_192_circle_remove.png"))); // NOI18N
        btnPermissionsCancel.setMnemonic('c');
        btnPermissionsCancel.setText(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.btnCancel.text")); // NOI18N
        btnPermissionsCancel.setToolTipText(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.btnCancel.toolTipText")); // NOI18N
        btnPermissionsCancel.setMaximumSize(null);
        btnPermissionsCancel.setMinimumSize(null);
        btnPermissionsCancel.setName("btnCancel"); // NOI18N
        btnPermissionsCancel.setPreferredSize(new java.awt.Dimension(110, 37));
        btnPermissionsCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPermissionsCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnPermissionsCancel);

        btnPermissionsAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_193_circle_ok.png"))); // NOI18N
        btnPermissionsAdd.setMnemonic('o');
        btnPermissionsAdd.setText(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.btnOk.text")); // NOI18N
        btnPermissionsAdd.setToolTipText(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.btnOk.toolTipText")); // NOI18N
        btnPermissionsAdd.setActionCommand(org.openide.util.NbBundle.getMessage(AddPermissionsDialog.class, "AddPermissionsDialog.btnOk.actionCommand")); // NOI18N
        btnPermissionsAdd.setEnabled(false);
        btnPermissionsAdd.setMaximumSize(null);
        btnPermissionsAdd.setMinimumSize(null);
        btnPermissionsAdd.setName("btnOk"); // NOI18N
        btnPermissionsAdd.setPreferredSize(new java.awt.Dimension(90, 37));
        btnPermissionsAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPermissionsAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnPermissionsAdd);

        pnlMain.add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPermissionsAddActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnPermissionsAddActionPerformed

        String selectedPermission = (String) cbPermissionsPermission
                .getSelectedItem();
        String tmpSelectedUser = (String) cbPermissionsUserName
                .getSelectedItem();
        String selectedUser = null;

        // probably have to remove #zone from user name
        int idx = tmpSelectedUser.indexOf("#");
        if (idx >= 0) {
            selectedUser = tmpSelectedUser.substring(0, idx);
        } else {
            selectedUser = tmpSelectedUser;
        }

        try {
            UserAO userAO = irodsFileSystem.getIRODSAccessObjectFactory()
                    .getUserAO(irodsAccount);
            User user = userAO.findByName(tmpSelectedUser);

            permissionToAdd = new UserFilePermission(selectedUser,
                    user.getId(),
                    FilePermissionEnum.valueOf(selectedPermission),
                    user.getUserType(), user.getZone());
            CollectionAO collectionAO = irodsFileSystem
                    .getIRODSAccessObjectFactory()
                    .getCollectionAO(irodsAccount);
            DataObjectAO dataObjectAO = irodsFileSystem
                    .getIRODSAccessObjectFactory()
                    .getDataObjectAO(irodsAccount);

            if (permissionToAdd.getFilePermissionEnum() == FilePermissionEnum.READ) {
                if (isCollection) {
                    collectionAO.setAccessPermissionRead(
                            permissionToAdd.getUserZone(),
                            selectedObjectFullPath,
                            permissionToAdd.getUserName(), true);
                } else {
                    dataObjectAO.setAccessPermissionRead(
                            permissionToAdd.getUserZone(),
                            selectedObjectFullPath,
                            permissionToAdd.getUserName());
                }
            } else if (permissionToAdd.getFilePermissionEnum() == FilePermissionEnum.WRITE) {
                if (isCollection) {
                    collectionAO.setAccessPermissionWrite(
                            permissionToAdd.getUserZone(),
                            selectedObjectFullPath,
                            permissionToAdd.getUserName(), true);
                } else {
                    dataObjectAO.setAccessPermissionWrite(
                            permissionToAdd.getUserZone(),
                            selectedObjectFullPath,
                            permissionToAdd.getUserName());
                }
            } else if (permissionToAdd.getFilePermissionEnum() == FilePermissionEnum.OWN) {
                if (isCollection) {
                    collectionAO.setAccessPermissionOwn(
                            permissionToAdd.getUserZone(),
                            selectedObjectFullPath,
                            permissionToAdd.getUserName(), true);
                } else {
                    dataObjectAO.setAccessPermissionOwn(
                            permissionToAdd.getUserZone(),
                            selectedObjectFullPath,
                            permissionToAdd.getUserName());
                }
            }

            tableModel.addRow(user, permissionToAdd.getFilePermissionEnum());

            JOptionPane.showMessageDialog(this,
                    "Permission Added Successfully", "Add Permissions",
                    JOptionPane.PLAIN_MESSAGE);

        } catch (JargonException ex) {
            log.error("cannot add permissions", ex);
            JOptionPane.showMessageDialog(this, "Permission Add Failed",
                    "Add Permissions", JOptionPane.PLAIN_MESSAGE);
        }

        dispose();
    }// GEN-LAST:event_btnPermissionsAddActionPerformed

    private void btnPermissionsCancelActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnPermissionsCancelActionPerformed
        dispose();
    }// GEN-LAST:event_btnPermissionsCancelActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPermissionsAdd;
    private javax.swing.JButton btnPermissionsCancel;
    private javax.swing.JComboBox cbPermissionsPermission;
    private javax.swing.JComboBox cbPermissionsUserName;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPermissionEdit;
    // End of variables declaration//GEN-END:variables
}
