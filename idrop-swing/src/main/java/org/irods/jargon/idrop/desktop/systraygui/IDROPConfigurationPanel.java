
/*
 * IDROPConfigurationPanel.java
 *
 * Created on Jul 18, 2011, 9:17:35 AM
 */
package org.irods.jargon.idrop.desktop.systraygui;

import java.awt.Cursor;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.irods.jargon.idrop.desktop.systraygui.services.IDROPConfigurationService;
import org.irods.jargon.idrop.desktop.systraygui.utils.IDROPConfig;
import org.irods.jargon.idrop.desktop.systraygui.viscomponents.SynchConfigTableModel;
import org.irods.jargon.idrop.exceptions.IdropException;
import org.irods.jargon.idrop.exceptions.IdropRuntimeException;
import org.irods.jargon.transfer.engine.synch.SynchException;
import org.irods.jargon.transfer.engine.synch.SynchManagerService;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mikeconway
 */
public class IDROPConfigurationPanel extends javax.swing.JDialog {

    private final IDROPCore idropCore;
    private static final org.slf4j.Logger log = LoggerFactory.getLogger(IDROPConfigurationPanel.class);
     SynchConfigTableModel synchConfigTableModel = null;

    /** Creates new form IDROPConfigurationPanel */
    public IDROPConfigurationPanel(java.awt.Frame parent, boolean modal, IDROPCore idropCore) {
        super(parent, modal);
        this.idropCore = idropCore;
        initComponents();
        initWithConfigData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlTop = new javax.swing.JPanel();
        pnlCenter = new javax.swing.JPanel();
        tabConfig = new javax.swing.JTabbedPane();
        pnlConfigIdrop = new javax.swing.JPanel();
        checkShowGUI = new javax.swing.JCheckBox();
        pnlConfigGrids = new javax.swing.JPanel();
        pnlConfigTransfers = new javax.swing.JPanel();
        checkLogSuccessfulTransfer = new javax.swing.JCheckBox();
        pnlConfigSynch = new javax.swing.JPanel();
        pnlConfigSynchListing = new javax.swing.JPanel();
        scrollSynchTable = new javax.swing.JScrollPane();
        jTableSynch = new javax.swing.JTable();
        pnlCpnfigSynchDetails = new javax.swing.JPanel();
        pnlBottom = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.title")); // NOI18N

        org.jdesktop.layout.GroupLayout pnlTopLayout = new org.jdesktop.layout.GroupLayout(pnlTop);
        pnlTop.setLayout(pnlTopLayout);
        pnlTopLayout.setHorizontalGroup(
            pnlTopLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 739, Short.MAX_VALUE)
        );
        pnlTopLayout.setVerticalGroup(
            pnlTopLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(pnlTop, java.awt.BorderLayout.NORTH);

        pnlCenter.setLayout(new java.awt.GridLayout(1, 0));

        pnlConfigIdrop.setLayout(new java.awt.GridBagLayout());

        checkShowGUI.setText(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.checkShowGUI.text")); // NOI18N
        checkShowGUI.setToolTipText(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.checkShowGUI.toolTipText")); // NOI18N
        checkShowGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkShowGUIActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        pnlConfigIdrop.add(checkShowGUI, gridBagConstraints);

        tabConfig.addTab(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.pnlConfigIdrop.TabConstraints.tabTitle"), pnlConfigIdrop); // NOI18N

        org.jdesktop.layout.GroupLayout pnlConfigGridsLayout = new org.jdesktop.layout.GroupLayout(pnlConfigGrids);
        pnlConfigGrids.setLayout(pnlConfigGridsLayout);
        pnlConfigGridsLayout.setHorizontalGroup(
            pnlConfigGridsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 718, Short.MAX_VALUE)
        );
        pnlConfigGridsLayout.setVerticalGroup(
            pnlConfigGridsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 494, Short.MAX_VALUE)
        );

        tabConfig.addTab(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.pnlConfigGrids.TabConstraints.tabTitle"), pnlConfigGrids); // NOI18N

        pnlConfigTransfers.setLayout(new java.awt.GridBagLayout());

        checkLogSuccessfulTransfer.setText(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.checkLogSuccessfulTransfer.text")); // NOI18N
        checkLogSuccessfulTransfer.setToolTipText(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.checkLogSuccessfulTransfer.toolTipText")); // NOI18N
        checkLogSuccessfulTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLogSuccessfulTransferActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(235, 233, 236, 232);
        pnlConfigTransfers.add(checkLogSuccessfulTransfer, gridBagConstraints);

        tabConfig.addTab(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.pnlConfigTransfers.TabConstraints.tabTitle"), pnlConfigTransfers); // NOI18N

        pnlConfigSynch.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlConfigSynchComponentShown(evt);
            }
        });
        pnlConfigSynch.setLayout(new java.awt.BorderLayout());

        pnlConfigSynchListing.setLayout(new java.awt.GridLayout());

        jTableSynch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableSynch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollSynchTable.setViewportView(jTableSynch);

        pnlConfigSynchListing.add(scrollSynchTable);

        pnlConfigSynch.add(pnlConfigSynchListing, java.awt.BorderLayout.CENTER);

        pnlCpnfigSynchDetails.setLayout(new java.awt.GridBagLayout());
        pnlConfigSynch.add(pnlCpnfigSynchDetails, java.awt.BorderLayout.SOUTH);

        tabConfig.addTab(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.pnlConfigSynch.TabConstraints.tabTitle"), pnlConfigSynch); // NOI18N

        pnlCenter.add(tabConfig);

        getContentPane().add(pnlCenter, java.awt.BorderLayout.CENTER);

        pnlBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnOK.setMnemonic('O');
        btnOK.setText(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.btnOK.text")); // NOI18N
        btnOK.setToolTipText(org.openide.util.NbBundle.getMessage(IDROPConfigurationPanel.class, "IDROPConfigurationPanel.btnOK.toolTipText")); // NOI18N
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        pnlBottom.add(btnOK);

        getContentPane().add(pnlBottom, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void checkShowGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkShowGUIActionPerformed
        log.info("updating show gui at startup to:{}", checkShowGUI.isSelected());
        try {
            idropCore.getIdropConfigurationService().updateConfig(IDROPConfigurationService.SHOW_GUI, Boolean.toString(checkShowGUI.isSelected()));
        } catch (IdropException ex) {
            log.error("error setting show gui property", ex);
            throw new IdropRuntimeException(ex);
        }
    }//GEN-LAST:event_checkShowGUIActionPerformed

    private void checkLogSuccessfulTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLogSuccessfulTransferActionPerformed
        log.info("updating log successful transfers to:{}", checkLogSuccessfulTransfer.isSelected());
        try {
            idropCore.getIdropConfigurationService().updateConfig(IDROPConfigurationService.TRANSFER_ENGINE_RECORD_SUCCESSFUL_FILES, Boolean.toString(checkShowGUI.isSelected()));
        } catch (IdropException ex) {
            log.error("error setting log successful property", ex);
            throw new IdropRuntimeException(ex);
        }

    }//GEN-LAST:event_checkLogSuccessfulTransferActionPerformed

    private void pnlConfigSynchComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlConfigSynchComponentShown
        log.info("lazily loading synch data");

        final IDROPConfigurationPanel thisPanel = this;
        if (synchConfigTableModel == null) {
            log.info("first run on synch table");
            jTableSynch.getSelectionModel().addListSelectionListener(new SynchListSelectionHandler());
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {

                SynchManagerService synchConfigurationService = idropCore.getTransferManager().getTransferServiceFactory().instanceSynchManagerService();
               
                
                
                try {
                    thisPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                     synchConfigTableModel = new SynchConfigTableModel(idropCore, synchConfigurationService.listAllSynchronizations());
                    jTableSynch.setModel(synchConfigTableModel);
                } catch (SynchException ex) {
                    log.error("error setting up synchs table", ex);
                    throw new IdropRuntimeException(ex);
                } finally {
                    thisPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            }
        });

    }//GEN-LAST:event_pnlConfigSynchComponentShown
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox checkLogSuccessfulTransfer;
    private javax.swing.JCheckBox checkShowGUI;
    private javax.swing.JTable jTableSynch;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlConfigGrids;
    private javax.swing.JPanel pnlConfigIdrop;
    private javax.swing.JPanel pnlConfigSynch;
    private javax.swing.JPanel pnlConfigSynchListing;
    private javax.swing.JPanel pnlConfigTransfers;
    private javax.swing.JPanel pnlCpnfigSynchDetails;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JScrollPane scrollSynchTable;
    private javax.swing.JTabbedPane tabConfig;
    // End of variables declaration//GEN-END:variables

    private void initWithConfigData() {
        IDROPConfig idropConfig = idropCore.getIdropConfig();
        checkShowGUI.setSelected(idropConfig.isShowGuiAtStartup());
        checkLogSuccessfulTransfer.setSelected(idropConfig.isLogSuccessfulTransfers());
    }
}

class SynchListSelectionHandler implements ListSelectionListener {
    public void valueChanged(ListSelectionEvent e) {
        
        if (e.getValueIsAdjusting() == true) {
            return;
        }
        
        ListSelectionModel lsm = (ListSelectionModel)e.getSource();

        int firstIndex = e.getFirstIndex();
        int lastIndex = e.getLastIndex();
        boolean isAdjusting = e.getValueIsAdjusting();
 
        if (lsm.isSelectionEmpty()) {
           return;
        } else {
            // Find out which indexes are selected.
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            for (int i = minIndex; i <= maxIndex; i++) {
                if (lsm.isSelectedIndex(i)) {
                   updateDetailsForSelectedSynch(i);
                }
            }
        }
       
    }

    private void updateDetailsForSelectedSynch(int i) {
        throw new UnsupportedOperationException("Not yet implemented");
    }
}
