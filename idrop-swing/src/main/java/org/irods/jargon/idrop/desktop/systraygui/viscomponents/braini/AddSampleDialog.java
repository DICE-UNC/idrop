/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui.viscomponents.braini;

import org.irods.jargon.core.exception.JargonException;
import org.irods.jargon.core.pub.CollectionAO;
import org.irods.jargon.core.pub.domain.AvuData;
import org.irods.jargon.core.pub.io.IRODSFile;
import org.irods.jargon.core.pub.io.IRODSFileFactory;
import org.irods.jargon.idrop.desktop.systraygui.ExperimentDialog;
import org.irods.jargon.idrop.desktop.systraygui.MessageManager;
import org.irods.jargon.idrop.desktop.systraygui.iDrop;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mconway
 */
public class AddSampleDialog extends javax.swing.JDialog {

    iDrop idropGUI;
    String experimentTarget;
    String experimentId;
    

    public static org.slf4j.Logger log = LoggerFactory
            .getLogger(AddSampleDialog.class);

    /**
     * Creates new form AddExperimentDialog
     */
    public AddSampleDialog(ExperimentDialog parent, boolean modal, iDrop idropGUI) {
        super(parent, modal);
        this.idropGUI = idropGUI;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlSelectParentDir = new javax.swing.JPanel();
        btnBrowseForDirectory = new javax.swing.JButton();
        txtParentDirectory = new javax.swing.JTextField();
        lblPrompt = new javax.swing.JLabel();
        scrollMetadata = new javax.swing.JScrollPane();
        pnlMetadata = new javax.swing.JPanel();
        lblSampleId = new javax.swing.JLabel();
        txtSampleId = new javax.swing.JTextField();
        lblClearingProtocol = new javax.swing.JLabel();
        txtClearingProtocol = new javax.swing.JTextField();
        lblSacrificeDate = new javax.swing.JLabel();
        txtSacrificeDate = new javax.swing.JFormattedTextField();
        lblClearingDate = new javax.swing.JLabel();
        txtClearingDate = new javax.swing.JFormattedTextField();
        lblSampleType = new javax.swing.JLabel();
        comboSampleType = new javax.swing.JComboBox<>();
        lblPrimaryAntibodyDate = new javax.swing.JLabel();
        txtPrimaryAntibodyDate = new javax.swing.JFormattedTextField();
        lblSecondaryAntibodyDate = new javax.swing.JLabel();
        txtSecondaryAntibodyDate = new javax.swing.JFormattedTextField();
        lblDateInClearingSolution = new javax.swing.JLabel();
        txtDateInClearingSolution = new javax.swing.JFormattedTextField();
        lblGenotype = new javax.swing.JLabel();
        txtGenotype = new javax.swing.JTextField();
        lblBreed = new javax.swing.JLabel();
        txtBreed = new javax.swing.JTextField();
        lblCagingStatus = new javax.swing.JLabel();
        txtCagingStatus = new javax.swing.JTextField();
        lblSex = new javax.swing.JLabel();
        comboSex = new javax.swing.JComboBox<>();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JFormattedTextField();
        lblInVivoTreatment = new javax.swing.JLabel();
        scrollInVivo = new javax.swing.JScrollPane();
        txtAreaInVivo = new javax.swing.JTextArea();
        lblTimePoint = new javax.swing.JLabel();
        txtTimePoint = new javax.swing.JTextField();
        lblNotes = new javax.swing.JLabel();
        scrollNotes = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextArea();
        pnlBottom = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        bntSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlSelectParentDir.setLayout(new java.awt.GridBagLayout());

        btnBrowseForDirectory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_148_folder_flag.png"))); // NOI18N
        btnBrowseForDirectory.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnBrowseForDirectory.text")); // NOI18N
        btnBrowseForDirectory.setToolTipText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnBrowseForDirectory.toolTipText")); // NOI18N
        btnBrowseForDirectory.setName("btnBrowseForDirectory"); // NOI18N
        btnBrowseForDirectory.setPreferredSize(new java.awt.Dimension(110, 37));
        btnBrowseForDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseForDirectoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        pnlSelectParentDir.add(btnBrowseForDirectory, gridBagConstraints);

        txtParentDirectory.setColumns(30);
        txtParentDirectory.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtParentDirectory.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        pnlSelectParentDir.add(txtParentDirectory, gridBagConstraints);

        lblPrompt.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblPrompt.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        pnlSelectParentDir.add(lblPrompt, gridBagConstraints);

        getContentPane().add(pnlSelectParentDir, java.awt.BorderLayout.NORTH);

        pnlMetadata.setLayout(new java.awt.GridBagLayout());

        lblSampleId.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSampleId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSampleId, gridBagConstraints);
        lblSampleId.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSampleId.AccessibleContext.accessibleName")); // NOI18N

        txtSampleId.setColumns(20);
        txtSampleId.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtSampleId.text")); // NOI18N
        txtSampleId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSampleIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtSampleId, gridBagConstraints);

        lblClearingProtocol.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblClearingProtocol.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblClearingProtocol, gridBagConstraints);

        txtClearingProtocol.setColumns(20);
        txtClearingProtocol.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtClearingProtocol.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtClearingProtocol, gridBagConstraints);

        lblSacrificeDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSacrificeDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSacrificeDate, gridBagConstraints);

        txtSacrificeDate.setColumns(12);
        txtSacrificeDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtSacrificeDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtSacrificeDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtSacrificeDate, gridBagConstraints);

        lblClearingDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblClearingDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblClearingDate, gridBagConstraints);

        txtClearingDate.setColumns(12);
        txtClearingDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtClearingDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtClearingDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtClearingDate, gridBagConstraints);

        lblSampleType.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSampleType.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSampleType, gridBagConstraints);

        comboSampleType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WT", "KO" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(comboSampleType, gridBagConstraints);

        lblPrimaryAntibodyDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblPrimaryAntibodyDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblPrimaryAntibodyDate, gridBagConstraints);

        txtPrimaryAntibodyDate.setColumns(12);
        txtPrimaryAntibodyDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtPrimaryAntibodyDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtPrimaryAntibodyDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtPrimaryAntibodyDate, gridBagConstraints);

        lblSecondaryAntibodyDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSecondaryAntibodyDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSecondaryAntibodyDate, gridBagConstraints);

        txtSecondaryAntibodyDate.setColumns(12);
        txtSecondaryAntibodyDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtSecondaryAntibodyDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtSecondaryAntibodyDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtSecondaryAntibodyDate, gridBagConstraints);

        lblDateInClearingSolution.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblDateInClearingSolution.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblDateInClearingSolution, gridBagConstraints);

        txtDateInClearingSolution.setColumns(12);
        txtDateInClearingSolution.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtDateInClearingSolution.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtDateInClearingSolution.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtDateInClearingSolution, gridBagConstraints);

        lblGenotype.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblGenotype.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblGenotype, gridBagConstraints);

        txtGenotype.setColumns(20);
        txtGenotype.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtGenotype.text")); // NOI18N
        txtGenotype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGenotypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtGenotype, gridBagConstraints);

        lblBreed.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblBreed.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblBreed, gridBagConstraints);

        txtBreed.setColumns(20);
        txtBreed.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtBreed.text")); // NOI18N
        txtBreed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBreedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtBreed, gridBagConstraints);

        lblCagingStatus.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblCagingStatus.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblCagingStatus, gridBagConstraints);

        txtCagingStatus.setColumns(20);
        txtCagingStatus.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtCagingStatus.text")); // NOI18N
        txtCagingStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCagingStatusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtCagingStatus, gridBagConstraints);

        lblSex.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSex.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSex, gridBagConstraints);

        comboSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", " " }));
        comboSex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSexActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(comboSex, gridBagConstraints);

        lblAge.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblAge.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblAge, gridBagConstraints);

        txtAge.setColumns(10);
        txtAge.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtAge.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtAge.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtAge, gridBagConstraints);

        lblInVivoTreatment.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblInVivoTreatment.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblInVivoTreatment, gridBagConstraints);

        txtAreaInVivo.setColumns(20);
        txtAreaInVivo.setRows(5);
        scrollInVivo.setViewportView(txtAreaInVivo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(scrollInVivo, gridBagConstraints);

        lblTimePoint.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblTimePoint.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        pnlMetadata.add(lblTimePoint, gridBagConstraints);

        txtTimePoint.setColumns(20);
        txtTimePoint.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtTimePoint.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtTimePoint, gridBagConstraints);

        lblNotes.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblNotes.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        pnlMetadata.add(lblNotes, gridBagConstraints);

        txtNotes.setColumns(30);
        txtNotes.setRows(5);
        scrollNotes.setViewportView(txtNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 24;
        pnlMetadata.add(scrollNotes, gridBagConstraints);

        scrollMetadata.setViewportView(pnlMetadata);

        getContentPane().add(scrollMetadata, java.awt.BorderLayout.LINE_END);

        pnlBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_197_remove.png"))); // NOI18N
        btnCancel.setMnemonic('c');
        btnCancel.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnCancel.text")); // NOI18N
        btnCancel.setToolTipText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnCancel.toolTipText")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.setPreferredSize(new java.awt.Dimension(110, 37));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlBottom.add(btnCancel);

        bntSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_193_circle_ok.png"))); // NOI18N
        bntSave.setMnemonic('O');
        bntSave.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.bntSave.text")); // NOI18N
        bntSave.setToolTipText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.bntSave.toolTipText")); // NOI18N
        bntSave.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bntSave.setMaximumSize(null);
        bntSave.setMinimumSize(null);
        bntSave.setName("btnExit"); // NOI18N
        bntSave.setPreferredSize(new java.awt.Dimension(90, 37));
        bntSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSaveActionPerformed(evt);
            }
        });
        pnlBottom.add(bntSave);

        getContentPane().add(pnlBottom, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseForDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseForDirectoryActionPerformed

        ChooseExperimentDialog chooseExperimentDialog = new ChooseExperimentDialog(idropGUI, true, idropGUI.getiDropCore());
        chooseExperimentDialog.setVisible(true);

        /**
        IRODSFinderDialog irodsFinderDialog = new IRODSFinderDialog(idropGUI, true, idropGUI.getiDropCore(), idropGUI.getIrodsAccount());
        irodsFinderDialog.setVisible(true);
        experimentTarget = irodsFinderDialog.getSelectedAbsolutePath();

        if (experimentTarget != null) {
            try {
                txtParentDirectory.setText(MiscIRODSUtils.abbreviateFileName(experimentTarget));
                txtParentDirectory.setText(experimentTarget);

                CollectionAO collectionAO = idropGUI.getiDropCore().getIRODSAccessObjectFactory().getCollectionAO(idropGUI.getIrodsAccount());
                List<AVUQueryElement> query = new ArrayList<AVUQueryElement>();
                query.add(AVUQueryElement.instanceForValueQuery(AVUQueryPart.ATTRIBUTE, AVUQueryOperatorEnum.EQUAL, "ExptId"));
                List<MetaDataAndDomainData> result = collectionAO.findMetadataValuesByMetadataQueryForCollection(query, experimentTarget);
                if (result.isEmpty()) {
                    log.warn("no experiment for:{}", txtParentDirectory);
                    MessageManager.showWarning(this, "selected collection is not an experiment");
                }

                experimentId = result.get(0).getAvuValue();
                lblPrompt.setText("Sample is associated with experiment:" + experimentId);

            } catch (JargonException ex) {
                log.error("exception finding experiment", ex);
                MessageManager.showError(this, ex.getMessage());
            } catch (JargonQueryException ex) {
                log.error("exception finding experiment", ex);
                MessageManager.showError(this, ex.getMessage());
            } 

        }*/
    }//GEN-LAST:event_btnBrowseForDirectoryActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed

        dispose();

    }//GEN-LAST:event_btnCancelActionPerformed

    private void bntSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSaveActionPerformed
        try {
            IRODSFileFactory irodsFileFactory = idropGUI.getiDropCore().getIRODSFileFactoryForLoggedInAccount();
            IRODSFile parentFile = irodsFileFactory.instanceIRODSFile(experimentTarget);
            IRODSFile sampleFile = irodsFileFactory.instanceIRODSFile(parentFile.getAbsolutePath(), txtSampleId.getText());
            sampleFile.mkdirs();
            CollectionAO collectionAO = idropGUI.getiDropCore().getIRODSAccessObjectFactory().getCollectionAO(idropGUI.getIrodsAccount());
            AvuData data = new AvuData("ExptId", experimentId, "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            if (txtSampleId.getText() == null) {
                MessageManager.showError(this, "no sample id provided");
                return;
            }

            data = new AvuData("SampleId", txtSampleId.getText(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            data = new AvuData("Sample type", comboSampleType.getSelectedItem().toString(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            if (!txtClearingProtocol.getText().isEmpty()) {
                data = new AvuData("Clearing Protocol to Use", txtClearingProtocol.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtSacrificeDate.getText().isEmpty()) {

                data = new AvuData("Date of Sacrifice", txtSacrificeDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtClearingDate.getText().isEmpty()) {

                data = new AvuData("Date of Clearing", txtClearingDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtPrimaryAntibodyDate.getText().isEmpty()) {

                data = new AvuData("Date of Primary Antibody", txtPrimaryAntibodyDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtSecondaryAntibodyDate.getText().isEmpty()) {

                data = new AvuData("Date of Secondary Antibody", txtSecondaryAntibodyDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtDateInClearingSolution.getText().isEmpty()) {

                data = new AvuData("Date in Clearing Solution", txtDateInClearingSolution.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtGenotype.getText().isEmpty()) {

                data = new AvuData("Genotype", txtGenotype.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtBreed.getText().isEmpty()) {

                data = new AvuData("Breed/Strain", txtBreed.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtCagingStatus.getText().isEmpty()) {

                data = new AvuData("Caging status", txtCagingStatus.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            data = new AvuData("Sex", comboSex.getSelectedItem().toString(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            if (!txtAge.getText().isEmpty()) {

                data = new AvuData("Age", txtAge.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtAreaInVivo.getText().isEmpty()) {
               
            data = new AvuData("In vivo treatment", txtAreaInVivo.getText(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtTimePoint.getText().isEmpty()) {

                data = new AvuData("Time point", txtTimePoint.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtNotes.getText().isEmpty()) {

                data = new AvuData("Notes", txtNotes.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }
        } catch (JargonException je) {
            log.error("error creating experiment", je);
            MessageManager.showError(this, je.getMessage());
        } finally {
            idropGUI.getiDropCore().closeAllIRODSConnections();
        }
        idropGUI.callReloadTree();

        dispose();
    }//GEN-LAST:event_bntSaveActionPerformed

    private void txtGenotypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGenotypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGenotypeActionPerformed

    private void txtBreedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBreedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBreedActionPerformed

    private void txtSampleIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSampleIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSampleIdActionPerformed

    private void txtCagingStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCagingStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCagingStatusActionPerformed

    private void comboSexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSexActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntSave;
    private javax.swing.JButton btnBrowseForDirectory;
    private javax.swing.JButton btnCancel;
    private javax.swing.JComboBox<String> comboSampleType;
    private javax.swing.JComboBox<String> comboSex;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblBreed;
    private javax.swing.JLabel lblCagingStatus;
    private javax.swing.JLabel lblClearingDate;
    private javax.swing.JLabel lblClearingProtocol;
    private javax.swing.JLabel lblDateInClearingSolution;
    private javax.swing.JLabel lblGenotype;
    private javax.swing.JLabel lblInVivoTreatment;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblPrimaryAntibodyDate;
    private javax.swing.JLabel lblPrompt;
    private javax.swing.JLabel lblSacrificeDate;
    private javax.swing.JLabel lblSampleId;
    private javax.swing.JLabel lblSampleType;
    private javax.swing.JLabel lblSecondaryAntibodyDate;
    private javax.swing.JLabel lblSex;
    private javax.swing.JLabel lblTimePoint;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlMetadata;
    private javax.swing.JPanel pnlSelectParentDir;
    private javax.swing.JScrollPane scrollInVivo;
    private javax.swing.JScrollPane scrollMetadata;
    private javax.swing.JScrollPane scrollNotes;
    private javax.swing.JFormattedTextField txtAge;
    private javax.swing.JTextArea txtAreaInVivo;
    private javax.swing.JTextField txtBreed;
    private javax.swing.JTextField txtCagingStatus;
    private javax.swing.JFormattedTextField txtClearingDate;
    private javax.swing.JTextField txtClearingProtocol;
    private javax.swing.JFormattedTextField txtDateInClearingSolution;
    private javax.swing.JTextField txtGenotype;
    private javax.swing.JTextArea txtNotes;
    private javax.swing.JTextField txtParentDirectory;
    private javax.swing.JFormattedTextField txtPrimaryAntibodyDate;
    private javax.swing.JFormattedTextField txtSacrificeDate;
    private javax.swing.JTextField txtSampleId;
    private javax.swing.JFormattedTextField txtSecondaryAntibodyDate;
    private javax.swing.JTextField txtTimePoint;
    // End of variables declaration//GEN-END:variables
}
