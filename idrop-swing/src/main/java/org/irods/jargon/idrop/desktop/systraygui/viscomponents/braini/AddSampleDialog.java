/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.irods.jargon.idrop.desktop.systraygui.viscomponents.braini;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import org.irods.jargon.core.exception.JargonException;
import org.irods.jargon.core.pub.CollectionAO;
import org.irods.jargon.core.pub.domain.AvuData;
import org.irods.jargon.core.pub.io.IRODSFile;
import org.irods.jargon.core.pub.io.IRODSFileFactory;
import org.irods.jargon.core.query.AVUQueryElement;
import org.irods.jargon.core.query.AVUQueryElement.AVUQueryPart;
import org.irods.jargon.core.query.AVUQueryOperatorEnum;
import org.irods.jargon.core.query.JargonQueryException;
import org.irods.jargon.core.query.MetaDataAndDomainData;
import org.irods.jargon.core.utils.MiscIRODSUtils;
import org.irods.jargon.idrop.desktop.systraygui.ExperimentDialog;
import org.irods.jargon.idrop.desktop.systraygui.MessageManager;
import org.irods.jargon.idrop.desktop.systraygui.iDrop;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mconway
 */
public class AddSampleDialog extends javax.swing.JDialog {

    iDrop idropGUI;
    String experimentTarget;
    String experimentId;
    
    private  DatePicker datePickerSacrifice;
    private  DatePicker txtClearingDate;
    private DatePicker txtPrimaryAntibodyDate;
    private DatePicker txtSecondaryAntibodyDate;
    private DatePicker txtDateInClearingSolution;
    

    public static org.slf4j.Logger log = LoggerFactory
            .getLogger(AddSampleDialog.class);

    /**
     * Creates new form AddExperimentDialog
     */
    public AddSampleDialog(ExperimentDialog parent, boolean modal, iDrop idropGUI) {
        super(parent, modal);
        this.idropGUI = idropGUI;
        initComponents();
        initDatePickerComponents();
    }

    private void initDatePickerComponents() {
        DatePickerSettings sacrificeSettings = new DatePickerSettings();
        sacrificeSettings.setFormatForDatesCommonEra("yyyy/MM/dd");
        datePickerSacrifice = new DatePicker(sacrificeSettings);
        pnlSacrificeDate.add(datePickerSacrifice);
        
        DatePickerSettings clearingSettings = new DatePickerSettings();
        clearingSettings.setFormatForDatesCommonEra("yyyy/MM/dd");
        txtClearingDate = new DatePicker(clearingSettings);
        pnlClearingDate.add(txtClearingDate);
        
        DatePickerSettings primaryAntibodySettings = new DatePickerSettings();
        primaryAntibodySettings.setFormatForDatesCommonEra("yyyy/MM/dd");
        txtPrimaryAntibodyDate = new DatePicker(primaryAntibodySettings);
        pnlPrimaryAntibodyDate.add(txtPrimaryAntibodyDate);
        
        DatePickerSettings secondaryAntibodySettings = new DatePickerSettings();
        secondaryAntibodySettings.setFormatForDatesCommonEra("yyyy/MM/dd");
        txtSecondaryAntibodyDate = new DatePicker(secondaryAntibodySettings);
        pnlSecondaryAntibodyDate.add(txtSecondaryAntibodyDate);
        
        DatePickerSettings dateInClearingSolutionSettings = new DatePickerSettings();
        dateInClearingSolutionSettings.setFormatForDatesCommonEra("yyyy/MM/dd");
        txtDateInClearingSolution = new DatePicker(dateInClearingSolutionSettings);
        pnlDateInClearingSolution.add(txtDateInClearingSolution);
        
        pack();
    }
    
    /**
     * reset the gui for validating
     */
    private void resetForValidation() {
        lblExperimentId.setForeground(Color.BLACK);
        lblSampleId.setForeground(Color.BLACK);

    }

    private boolean validateData() {
        boolean valid = true;
        StringBuilder msg = new StringBuilder();
        resetForValidation();
        if (txtSampleId.getText() == null || txtSampleId.getText().isEmpty()) {
            valid = false;
            msg.append("Add a sample id for the experiment ");
            lblSampleId.setForeground(Color.RED);
        }
        
        if (experimentId == null || experimentId.isEmpty()) {
            valid = false;
            msg.append("Select an experiment for this sample ");
            btnBrowseForDirectory.setForeground(Color.RED);
        }
        
        if (!valid) {
            MessageManager.showWarning(this, msg.toString());
        }

        return valid;

    }
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlSelectParentDir = new javax.swing.JPanel();
        btnBrowseForDirectory = new javax.swing.JButton();
        lblPrompt = new javax.swing.JLabel();
        pnlExperimentDets = new javax.swing.JPanel();
        lblExperimentId = new javax.swing.JLabel();
        lblExperimentIdValue = new javax.swing.JLabel();
        lblExperimentPI = new javax.swing.JLabel();
        lblExperimentPIValue = new javax.swing.JLabel();
        lblExperimentPurpose = new javax.swing.JLabel();
        lblExperimentPurposeValue = new javax.swing.JLabel();
        lblExperimentPath = new javax.swing.JLabel();
        lblExperimentPathValue = new javax.swing.JLabel();
        scrollMetadata = new javax.swing.JScrollPane();
        pnlMetadata = new javax.swing.JPanel();
        lblSampleId = new javax.swing.JLabel();
        txtSampleId = new javax.swing.JTextField();
        lblClearingProtocol = new javax.swing.JLabel();
        txtClearingProtocol = new javax.swing.JTextField();
        lblSacrificeDate = new javax.swing.JLabel();
        pnlSacrificeDate = new javax.swing.JPanel();
        lblClearingDate = new javax.swing.JLabel();
        pnlClearingDate = new javax.swing.JPanel();
        lblSampleType = new javax.swing.JLabel();
        comboSampleType = new javax.swing.JComboBox<>();
        lblPrimaryAntibodyDate = new javax.swing.JLabel();
        pnlPrimaryAntibodyDate = new javax.swing.JPanel();
        lblSecondaryAntibodyDate = new javax.swing.JLabel();
        pnlSecondaryAntibodyDate = new javax.swing.JPanel();
        lblDateInClearingSolution = new javax.swing.JLabel();
        pnlDateInClearingSolution = new javax.swing.JPanel();
        lblGenotype = new javax.swing.JLabel();
        txtGenotype = new javax.swing.JTextField();
        lblBreed = new javax.swing.JLabel();
        txtBreed = new javax.swing.JTextField();
        lblCagingStatus = new javax.swing.JLabel();
        txtCagingStatus = new javax.swing.JTextField();
        lblSex = new javax.swing.JLabel();
        comboSex = new javax.swing.JComboBox<>();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JFormattedTextField();
        lblInVivoTreatment = new javax.swing.JLabel();
        scrollInVivo = new javax.swing.JScrollPane();
        txtAreaInVivo = new javax.swing.JTextArea();
        lblTimePoint = new javax.swing.JLabel();
        txtTimePoint = new javax.swing.JTextField();
        lblNotes = new javax.swing.JLabel();
        scrollNotes = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextArea();
        pnlBottom = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        bntSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlSelectParentDir.setLayout(new java.awt.GridBagLayout());

        btnBrowseForDirectory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_148_folder_flag.png"))); // NOI18N
        btnBrowseForDirectory.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnBrowseForDirectory.text")); // NOI18N
        btnBrowseForDirectory.setToolTipText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnBrowseForDirectory.toolTipText")); // NOI18N
        btnBrowseForDirectory.setName("btnBrowseForDirectory"); // NOI18N
        btnBrowseForDirectory.setPreferredSize(new java.awt.Dimension(110, 37));
        btnBrowseForDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseForDirectoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        pnlSelectParentDir.add(btnBrowseForDirectory, gridBagConstraints);

        lblPrompt.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblPrompt.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        pnlSelectParentDir.add(lblPrompt, gridBagConstraints);

        pnlExperimentDets.setLayout(new java.awt.GridBagLayout());

        lblExperimentId.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblExperimentId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExperimentId.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        pnlExperimentDets.add(lblExperimentId, gridBagConstraints);

        lblExperimentIdValue.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        lblExperimentIdValue.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentIdValue.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        pnlExperimentDets.add(lblExperimentIdValue, gridBagConstraints);

        lblExperimentPI.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblExperimentPI.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExperimentPI.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentPI.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        pnlExperimentDets.add(lblExperimentPI, gridBagConstraints);

        lblExperimentPIValue.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentPIValue.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        pnlExperimentDets.add(lblExperimentPIValue, gridBagConstraints);

        lblExperimentPurpose.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblExperimentPurpose.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExperimentPurpose.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentPurpose.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        pnlExperimentDets.add(lblExperimentPurpose, gridBagConstraints);

        lblExperimentPurposeValue.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentPurposeValue.text")); // NOI18N
        lblExperimentPurposeValue.setToolTipText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentPurposeValue.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        pnlExperimentDets.add(lblExperimentPurposeValue, gridBagConstraints);

        lblExperimentPath.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblExperimentPath.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentPath.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlExperimentDets.add(lblExperimentPath, gridBagConstraints);

        lblExperimentPathValue.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblExperimentPathValue.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlExperimentDets.add(lblExperimentPathValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlSelectParentDir.add(pnlExperimentDets, gridBagConstraints);

        getContentPane().add(pnlSelectParentDir, java.awt.BorderLayout.NORTH);

        pnlMetadata.setLayout(new java.awt.GridBagLayout());

        lblSampleId.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSampleId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSampleId, gridBagConstraints);
        lblSampleId.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSampleId.AccessibleContext.accessibleName")); // NOI18N

        txtSampleId.setColumns(20);
        txtSampleId.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtSampleId.text")); // NOI18N
        txtSampleId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSampleIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtSampleId, gridBagConstraints);

        lblClearingProtocol.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblClearingProtocol.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblClearingProtocol, gridBagConstraints);

        txtClearingProtocol.setColumns(20);
        txtClearingProtocol.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtClearingProtocol.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtClearingProtocol, gridBagConstraints);

        lblSacrificeDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSacrificeDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSacrificeDate, gridBagConstraints);

        pnlSacrificeDate.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(pnlSacrificeDate, gridBagConstraints);

        lblClearingDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblClearingDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblClearingDate, gridBagConstraints);

        pnlClearingDate.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(pnlClearingDate, gridBagConstraints);

        lblSampleType.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSampleType.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSampleType, gridBagConstraints);

        comboSampleType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WT", "KO" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(comboSampleType, gridBagConstraints);

        lblPrimaryAntibodyDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblPrimaryAntibodyDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblPrimaryAntibodyDate, gridBagConstraints);

        pnlPrimaryAntibodyDate.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(pnlPrimaryAntibodyDate, gridBagConstraints);

        lblSecondaryAntibodyDate.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSecondaryAntibodyDate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSecondaryAntibodyDate, gridBagConstraints);

        pnlSecondaryAntibodyDate.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(pnlSecondaryAntibodyDate, gridBagConstraints);

        lblDateInClearingSolution.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblDateInClearingSolution.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblDateInClearingSolution, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(pnlDateInClearingSolution, gridBagConstraints);

        lblGenotype.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblGenotype.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblGenotype, gridBagConstraints);

        txtGenotype.setColumns(20);
        txtGenotype.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtGenotype.text")); // NOI18N
        txtGenotype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGenotypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtGenotype, gridBagConstraints);

        lblBreed.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblBreed.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblBreed, gridBagConstraints);

        txtBreed.setColumns(20);
        txtBreed.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtBreed.text")); // NOI18N
        txtBreed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBreedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtBreed, gridBagConstraints);

        lblCagingStatus.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblCagingStatus.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblCagingStatus, gridBagConstraints);

        txtCagingStatus.setColumns(20);
        txtCagingStatus.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtCagingStatus.text")); // NOI18N
        txtCagingStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCagingStatusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtCagingStatus, gridBagConstraints);

        lblSex.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblSex.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblSex, gridBagConstraints);

        comboSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", " " }));
        comboSex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSexActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(comboSex, gridBagConstraints);

        lblAge.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblAge.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblAge, gridBagConstraints);

        txtAge.setColumns(10);
        txtAge.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtAge.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtAge.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtAge, gridBagConstraints);

        lblInVivoTreatment.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblInVivoTreatment.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnlMetadata.add(lblInVivoTreatment, gridBagConstraints);

        txtAreaInVivo.setColumns(20);
        txtAreaInVivo.setRows(5);
        scrollInVivo.setViewportView(txtAreaInVivo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(scrollInVivo, gridBagConstraints);

        lblTimePoint.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblTimePoint.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        pnlMetadata.add(lblTimePoint, gridBagConstraints);

        txtTimePoint.setColumns(20);
        txtTimePoint.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.txtTimePoint.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlMetadata.add(txtTimePoint, gridBagConstraints);

        lblNotes.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.lblNotes.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        pnlMetadata.add(lblNotes, gridBagConstraints);

        txtNotes.setColumns(30);
        txtNotes.setRows(5);
        scrollNotes.setViewportView(txtNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 24;
        pnlMetadata.add(scrollNotes, gridBagConstraints);

        scrollMetadata.setViewportView(pnlMetadata);

        getContentPane().add(scrollMetadata, java.awt.BorderLayout.CENTER);

        pnlBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_197_remove.png"))); // NOI18N
        btnCancel.setMnemonic('c');
        btnCancel.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnCancel.text")); // NOI18N
        btnCancel.setToolTipText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.btnCancel.toolTipText")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.setPreferredSize(new java.awt.Dimension(110, 37));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlBottom.add(btnCancel);

        bntSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/irods/jargon/idrop/desktop/systraygui/images/glyphicons_193_circle_ok.png"))); // NOI18N
        bntSave.setMnemonic('O');
        bntSave.setText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.bntSave.text")); // NOI18N
        bntSave.setToolTipText(org.openide.util.NbBundle.getMessage(AddSampleDialog.class, "AddSampleDialog.bntSave.toolTipText")); // NOI18N
        bntSave.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bntSave.setMaximumSize(null);
        bntSave.setMinimumSize(null);
        bntSave.setName("btnExit"); // NOI18N
        bntSave.setPreferredSize(new java.awt.Dimension(90, 37));
        bntSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSaveActionPerformed(evt);
            }
        });
        pnlBottom.add(bntSave);

        getContentPane().add(pnlBottom, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseForDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseForDirectoryActionPerformed

        ChooseExperimentDialog chooseExperimentDialog = new ChooseExperimentDialog(idropGUI, true, idropGUI.getiDropCore());
        chooseExperimentDialog.setLocationRelativeTo(this);

        chooseExperimentDialog.setVisible(true);
        if (chooseExperimentDialog.getSelectedExperiment() == null) {
            return;
        }
        
        lblExperimentPathValue.setText(chooseExperimentDialog.getSelectedExperiment().getExperimentPath());
        lblExperimentPIValue.setText(chooseExperimentDialog.getSelectedExperiment().getExperimentPi());
        lblExperimentPurposeValue.setText(chooseExperimentDialog.getSelectedExperiment().getExperimentPurpose());
        lblExperimentIdValue.setText(chooseExperimentDialog.getSelectedExperiment().getExperimentId());
        experimentTarget = chooseExperimentDialog.getSelectedExperiment().getExperimentPath();

        /**
        IRODSFinderDialog irodsFinderDialog = new IRODSFinderDialog(idropGUI, true, idropGUI.getiDropCore(), idropGUI.getIrodsAccount());
        irodsFinderDialog.setVisible(true);
        experimentTarget = irodsFinderDialog.getSelectedAbsolutePath();**/

        if (experimentTarget != null) {
            try {
              
                CollectionAO collectionAO = idropGUI.getiDropCore().getIRODSAccessObjectFactory().getCollectionAO(idropGUI.getIrodsAccount());
                List<AVUQueryElement> query = new ArrayList<AVUQueryElement>();
                query.add(AVUQueryElement.instanceForValueQuery(AVUQueryPart.ATTRIBUTE, AVUQueryOperatorEnum.EQUAL, "ExptId"));
                List<MetaDataAndDomainData> result = collectionAO.findMetadataValuesByMetadataQueryForCollection(query, experimentTarget);
                if (result.isEmpty()) {
                    log.warn("no experiment for:{}", experimentTarget);
                    MessageManager.showWarning(this, "selected collection is not an experiment");
                }

                experimentId = result.get(0).getAvuValue();
                lblPrompt.setText("Sample is associated with experiment:" + experimentId);
             
            } catch (JargonException ex) {
                log.error("exception finding experiment", ex);
                MessageManager.showError(this, ex.getMessage());
            } catch (JargonQueryException ex) {
                log.error("exception finding experiment", ex);
                MessageManager.showError(this, ex.getMessage());
            } 

        }
    }//GEN-LAST:event_btnBrowseForDirectoryActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed

        dispose();

    }//GEN-LAST:event_btnCancelActionPerformed

    private void bntSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSaveActionPerformed
       
        
        if (!this.validateData()) {
            return;
        }
        
        try {
            IRODSFileFactory irodsFileFactory = idropGUI.getiDropCore().getIRODSFileFactoryForLoggedInAccount();
            IRODSFile parentFile = irodsFileFactory.instanceIRODSFile(experimentTarget);
            IRODSFile sampleFile = irodsFileFactory.instanceIRODSFile(parentFile.getAbsolutePath(), txtSampleId.getText());
            sampleFile.mkdirs();
            CollectionAO collectionAO = idropGUI.getiDropCore().getIRODSAccessObjectFactory().getCollectionAO(idropGUI.getIrodsAccount());
            AvuData data = new AvuData("ParentExptId", experimentId, "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            if (txtSampleId.getText() == null) {
                MessageManager.showError(this, "no sample id provided");
                return;
            }

            data = new AvuData("SampleId", txtSampleId.getText(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            data = new AvuData("Sample type", comboSampleType.getSelectedItem().toString(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            if (!txtClearingProtocol.getText().isEmpty()) {
                data = new AvuData("Clearing Protocol to Use", txtClearingProtocol.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }
           
            if (!datePickerSacrifice.getText().isEmpty()) {

                data = new AvuData("Date of Sacrifice", datePickerSacrifice.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            } 

            if (!txtClearingDate.getText().isEmpty()) {

                data = new AvuData("Date of Clearing", txtClearingDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtPrimaryAntibodyDate.getText().isEmpty()) {

                data = new AvuData("Date of Primary Antibody", txtPrimaryAntibodyDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtSecondaryAntibodyDate.getText().isEmpty()) {

                data = new AvuData("Date of Secondary Antibody", txtSecondaryAntibodyDate.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtDateInClearingSolution.getText().isEmpty()) {

                data = new AvuData("Date in Clearing Solution", txtDateInClearingSolution.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtGenotype.getText().isEmpty()) {

                data = new AvuData("Genotype", txtGenotype.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtBreed.getText().isEmpty()) {

                data = new AvuData("Breed/Strain", txtBreed.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtCagingStatus.getText().isEmpty()) {

                data = new AvuData("Caging status", txtCagingStatus.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            data = new AvuData("Sex", comboSex.getSelectedItem().toString(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);

            if (!txtAge.getText().isEmpty()) {

                data = new AvuData("Age", txtAge.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtAreaInVivo.getText().isEmpty()) {
               
            data = new AvuData("In vivo treatment", txtAreaInVivo.getText(), "ipc-reserved-unit");
            collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtTimePoint.getText().isEmpty()) {

                data = new AvuData("Time point", txtTimePoint.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }

            if (!txtNotes.getText().isEmpty()) {

                data = new AvuData("Notes", txtNotes.getText(), "ipc-reserved-unit");
                collectionAO.addAVUMetadata(sampleFile.getAbsolutePath(), data);
            }
            
            MessageManager.showMessage(this, "Sample added successfully");

        } catch (JargonException je) {
            log.error("error creating experiment", je);
            MessageManager.showError(this, je.getMessage());
        } finally {
            idropGUI.getiDropCore().closeAllIRODSConnections();
        }
        idropGUI.callReloadTree();

        dispose();
    }//GEN-LAST:event_bntSaveActionPerformed

    private void txtGenotypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGenotypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGenotypeActionPerformed

    private void txtBreedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBreedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBreedActionPerformed

    private void txtSampleIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSampleIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSampleIdActionPerformed

    private void txtCagingStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCagingStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCagingStatusActionPerformed

    private void comboSexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSexActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntSave;
    private javax.swing.JButton btnBrowseForDirectory;
    private javax.swing.JButton btnCancel;
    private javax.swing.JComboBox<String> comboSampleType;
    private javax.swing.JComboBox<String> comboSex;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblBreed;
    private javax.swing.JLabel lblCagingStatus;
    private javax.swing.JLabel lblClearingDate;
    private javax.swing.JLabel lblClearingProtocol;
    private javax.swing.JLabel lblDateInClearingSolution;
    private javax.swing.JLabel lblExperimentId;
    private javax.swing.JLabel lblExperimentIdValue;
    private javax.swing.JLabel lblExperimentPI;
    private javax.swing.JLabel lblExperimentPIValue;
    private javax.swing.JLabel lblExperimentPath;
    private javax.swing.JLabel lblExperimentPathValue;
    private javax.swing.JLabel lblExperimentPurpose;
    private javax.swing.JLabel lblExperimentPurposeValue;
    private javax.swing.JLabel lblGenotype;
    private javax.swing.JLabel lblInVivoTreatment;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblPrimaryAntibodyDate;
    private javax.swing.JLabel lblPrompt;
    private javax.swing.JLabel lblSacrificeDate;
    private javax.swing.JLabel lblSampleId;
    private javax.swing.JLabel lblSampleType;
    private javax.swing.JLabel lblSecondaryAntibodyDate;
    private javax.swing.JLabel lblSex;
    private javax.swing.JLabel lblTimePoint;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlClearingDate;
    private javax.swing.JPanel pnlDateInClearingSolution;
    private javax.swing.JPanel pnlExperimentDets;
    private javax.swing.JPanel pnlMetadata;
    private javax.swing.JPanel pnlPrimaryAntibodyDate;
    private javax.swing.JPanel pnlSacrificeDate;
    private javax.swing.JPanel pnlSecondaryAntibodyDate;
    private javax.swing.JPanel pnlSelectParentDir;
    private javax.swing.JScrollPane scrollInVivo;
    private javax.swing.JScrollPane scrollMetadata;
    private javax.swing.JScrollPane scrollNotes;
    private javax.swing.JFormattedTextField txtAge;
    private javax.swing.JTextArea txtAreaInVivo;
    private javax.swing.JTextField txtBreed;
    private javax.swing.JTextField txtCagingStatus;
    private javax.swing.JTextField txtClearingProtocol;
    private javax.swing.JTextField txtGenotype;
    private javax.swing.JTextArea txtNotes;
    private javax.swing.JTextField txtSampleId;
    private javax.swing.JTextField txtTimePoint;
    // End of variables declaration//GEN-END:variables
}
